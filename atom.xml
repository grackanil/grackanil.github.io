<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grac Kanil</title>
  
  <subtitle>「以梦为马，不负韶华。」</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://grackanil.top/"/>
  <updated>2019-05-01T05:24:52.397Z</updated>
  <id>http://grackanil.top/</id>
  
  <author>
    <name>Grac Kanil</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>静态网站托管服务平台</title>
    <link href="http://grackanil.top/2019/05/01/static-site-hosting-service/"/>
    <id>http://grackanil.top/2019/05/01/static-site-hosting-service/</id>
    <published>2019-05-01T05:24:52.397Z</published>
    <updated>2019-05-01T05:24:52.397Z</updated>
    
    <content type="html"><![CDATA[<p>简要罗列静态网站托管平台。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近使用<code>Hexo</code>和<code>GitHub Pages</code>搭建个人静态主页，发现一些问题，遂做一个横向方案比较，了解一下具体的异同。有很多平台没有亲自实践，所以说明仅供记录参考，细节有待挖掘和更新。同时，如果您有其他推荐的方案，欢迎评论分享，持续更新：)</p><h2 id="GitHub-Pages-被设计为直接来源于GitHub仓库的个人、组织或项目主页。"><a href="#GitHub-Pages-被设计为直接来源于GitHub仓库的个人、组织或项目主页。" class="headerlink" title="GitHub Pages 被设计为直接来源于GitHub仓库的个人、组织或项目主页。"></a><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 被设计为直接来源于<code>GitHub</code>仓库的个人、组织或项目主页。</h2><ul><li>提供静态网站托管服务</li><li>不支持服务端代码，比如 PHP、Ruby 或 Python</li><li>GitHub Pages 提供的域名可以支持 HTTPS 访问</li><li><del>可以配置自定义的域名，但是无法给自定义的域名配置 SSL ，<code>HTTPS is not supported for GitHub Pages using custom domains.</code></del> 查阅 <a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/" target="_blank" rel="noopener">Github Help</a>，所有 GitHub Pages 网站（包括使用自定义域正确配置的网站）已经都支持 HTTPS 和 HTTPS 强制实施。</li><li>响应速度还是有点慢</li><li>网站仓库小于<code>1GB</code>，带宽限制 <code>100GB/每月</code>，构建限制<code>10次/每小时</code></li></ul><h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a></h2><ul><li>不支持后台逻辑运算能力的网页</li><li>如果要部署 Hexo 大体思路是，通过 CLI (命令行界面)将 md 渲染为静态网站，然后通过 git 部署到 Git 平台，然后使用 Netlify 的 webhook 自动抓取部署</li><li>具有全球CDN、持续部署、一键HTTPS等优势</li><li>能通过客户端 JS 与可重用 API 可以带来动态功能，炫酷。</li><li>可以使用 Hugo 静态网站生成器和 Hetlify 网站自动化系统配合，以解决 Github Pages 的不支持 HTTPS 和 响应慢的问题</li></ul><h2 id="Coding-Pages-由国内-Coding-提供"><a href="#Coding-Pages-由国内-Coding-提供" class="headerlink" title="Coding Pages 由国内 Coding 提供"></a><a href="https://coding.net/pages/" target="_blank" rel="noopener">Coding Pages</a> 由国内 Coding 提供</h2><ul><li>访问速度友好</li><li>可以做 GitHub Pages 和 Coding Pages 同时部署 Hexo，然后通过域名 DNS 解析，国外访问 GitHub Pages ，国内 访问 Coding Pages， 以优化访问速度</li><li>可以免费绑定多个自定义域名</li><li>自定义域名可以享有免费 SSL 证书，全站支持 HTTPS 协议</li><li>更新代码库就可以自动部署。服务器稳定，香港服务器国外支持也友好</li><li>新增动态页面部署</li><li>有一个小问题是，网站首页如果不放置官方『Hosted by Coding Pages』的链接，会系统添加中间『Hosted by Coding Pages』页面。</li></ul><h2 id="GitLab-Pages-是由-GitLab-提供，旨在为-GitLab-工程、个人、groups-创建网站。"><a href="#GitLab-Pages-是由-GitLab-提供，旨在为-GitLab-工程、个人、groups-创建网站。" class="headerlink" title="GitLab Pages 是由 GitLab 提供，旨在为 GitLab 工程、个人、groups 创建网站。"></a><a href="https://about.gitlab.com/features/pages/" target="_blank" rel="noopener">GitLab Pages</a> 是由 GitLab 提供，旨在为 GitLab 工程、个人、groups 创建网站。</h2><ul><li>可以使用任何静态网站生成器，如 Jekyll、Middleman、Hexo、Hugo、Pelican等</li><li>可以配置自定义域名 HTTPS，需要的是上传证书</li></ul><h2 id="Now"><a href="#Now" class="headerlink" title="Now"></a><a href="https://zeit.co/now" target="_blank" rel="noopener">Now</a></h2><ul><li>不仅支持静态网站托管，也支持 JavaScript(Node.js) 或者 Docker 驱动的网站，</li><li>可以使用 CLI 或者链接 Git 仓库</li><li>支持自定义域名，开启 HTTPS</li><li>传输基于 HTTP/2</li><li>不需要安装 Git 等源代码控制工具，不需要设置 keys 或者 tokens</li><li>实时部署。</li></ul><h2 id="Firebase-Hosting"><a href="#Firebase-Hosting" class="headerlink" title="Firebase Hosting"></a><a href="https://www.firebase.com/docs/hosting/" target="_blank" rel="noopener">Firebase Hosting</a></h2><ul><li>只能 CLI</li><li>支持自定义域名并支持开启 HTTPS</li><li>支持重定向和重写。</li></ul><h2 id="Bitbucket-Cloud"><a href="#Bitbucket-Cloud" class="headerlink" title="Bitbucket Cloud"></a><a href="https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html" target="_blank" rel="noopener">Bitbucket Cloud</a></h2><ul><li>必须要通过 HTTPS 访问</li><li>不能自定义域名</li><li>所有项目的静态网站代码都只能放在专门的站点仓库里。</li><li>页面缓存 15 分钟，意味着改变不会立即可见。</li></ul><h2 id="aerobatic"><a href="#aerobatic" class="headerlink" title="aerobatic"></a><a href="https://www.aerobatic.com/" target="_blank" rel="noopener">aerobatic</a></h2><ul><li>可以支持 CLI 上传代码</li><li>自定义域名需要收费。</li></ul><h2 id="surge"><a href="#surge" class="headerlink" title="surge"></a><a href="https://surge.sh/" target="_blank" rel="noopener">surge</a></h2><ul><li>只支持 CLI</li><li>支持自定义域名，开启 SSL 是需要收费，同时需要自己上传证书</li></ul><blockquote><p>持续更新…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简要罗列静态网站托管平台。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近使用&lt;code&gt;Hexo&lt;/code&gt;和&lt;code&gt;GitHub Pages&lt;/code&gt;搭建
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://grackanil.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>NSObject +(void)load 和+(void)initialize 方法的理解</title>
    <link href="http://grackanil.top/2019/05/01/runtime-load/"/>
    <id>http://grackanil.top/2019/05/01/runtime-load/</id>
    <published>2019-05-01T05:24:52.396Z</published>
    <updated>2019-05-01T05:24:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>从 <code>runtime</code> 源码，理解 <code>+(void)load</code> 和 <code>+(void)initialize</code> 方法。</p><h2 id="零、官方文档"><a href="#零、官方文档" class="headerlink" title="零、官方文档"></a>零、官方文档</h2><ul><li><p><a href="https://developer.apple.com/documentation/objectivec/nsobject/1418639-initialize?language=objc" target="_blank" rel="noopener">initialize</a><br>Initializes the class before it receives its first message.</p></li><li><p><a href="https://developer.apple.com/documentation/objectivec/nsobject/1418815-load?language=objc" target="_blank" rel="noopener">load</a><br>Invoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.</p></li></ul><p>根据文档，<code>+load</code> 方法只要文件被引用就会被调用，所以如果类没有被引进项目,就不会调用 <code>+load</code>。<code>+initialize</code> 方法是在类或者子类的第一个方法（抛一个问题，那 runtime 调用 <code>+load</code> 方法呢，算第一个方法吗？）被调用之前调用，即使类被引用进项目，但没有被使用， <code>+initialize</code> 也不会被调用。两者都只会被调用一次。</p><h2 id="一、实验田"><a href="#一、实验田" class="headerlink" title="一、实验田"></a>一、实验田</h2><p><a href="https://github.com/grackanil/GEKPlots/tree/master/LoadAndInitializePlot" target="_blank" rel="noopener">Demo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Father.h 和 Father.m</span><br><span class="line">@interface Father : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#import &quot;Father.h&quot;</span><br><span class="line"></span><br><span class="line">#pragma mark - Father</span><br><span class="line"></span><br><span class="line">@implementation Father</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    # [self class];</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)initialize &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Son .h 和 .m</span><br><span class="line">@interface Son : Father</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Son</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    # [self class];</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)initialize &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Category Active of Son .h and .m</span><br><span class="line">@interface Son (Active)</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Son (Active)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    # [self class];</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)initialize &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Category Stiff of Son .h and .m</span><br><span class="line">@interface Son (Stiff)</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Son (Stiff)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    # [self class];</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)initialize &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 父类的方法优先于子类的方法，类中的方法优先于类别中的方法。</span><br><span class="line">2018-02-01 10:59:11.957088+0800 LoadAndInitializePlot[21886:9588221] +[Father load]</span><br><span class="line">2018-02-01 10:59:11.957867+0800 LoadAndInitializePlot[21886:9588221] +[Son load]</span><br><span class="line">2018-02-01 10:59:11.957997+0800 LoadAndInitializePlot[21886:9588221] +[Son(Active) load]</span><br><span class="line">2018-02-01 10:59:11.958132+0800 LoadAndInitializePlot[21886:9588221] +[Son(Stiff) load]</span><br></pre></td></tr></table></figure></p><p>在 Father load 中添加 <code>[self class];</code>，结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 调用了 Father 中的方法，第一个方法`[self class];`被调用时，在调用方法之前执行 `+initialize` 方法。可以看出，虽然引用了 Son 类，但没有调用 Son 的 `+initalize`，同时 runtime 对 `+(void)load` 的调用不视为调用类的第一个方法，如果是子类 Son 也会调用 `+initialize` 的。</span><br><span class="line">2018-02-01 11:03:38.424049+0800 LoadAndInitializePlot[21961:9595895] +[Father initialize]</span><br><span class="line">2018-02-01 11:03:38.424803+0800 LoadAndInitializePlot[21961:9595895] +[Father load]</span><br><span class="line">2018-02-01 11:03:38.424953+0800 LoadAndInitializePlot[21961:9595895] +[Son load]</span><br><span class="line">2018-02-01 11:03:38.425123+0800 LoadAndInitializePlot[21961:9595895] +[Son(Active) load]</span><br><span class="line">2018-02-01 11:03:38.425418+0800 LoadAndInitializePlot[21961:9595895] +[Son(Stiff) load]</span><br></pre></td></tr></table></figure></p><p>在 Son load 中添加 <code>[self class];</code>，结果如下两种（在Build Phases -&gt; Compile Sources 中拖动类别的上下顺序，也就是编译的先后顺序）。根据 runtime 对 category 加载过程，一个类的所有类别的方法被取出放在 method_list_t 中，另外，这里的新生成的 category 的方法会先于 早期生成的 category 的方法，倒序添加的。生成所有 method 的 list 之后，将所有的方法 前序 添加到类的方法数组中。原来的类的方法被 category 的方法覆盖，但被覆盖的方法依旧还在里面。这是因为系统调用方法，根据方法名在 method_list 中查找方法，找到第一个名字匹配的方法之后就不继续往下找了。每次调用都是 method_list 中最前面的同名方法，其他的方法仍在 method_list 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Son (Stiff) 类别在 Son (Active) 后编译</span><br><span class="line">2018-02-01 11:46:45.558933+0800 LoadAndInitializePlot[22604:9665625] +[Father load]</span><br><span class="line">2018-02-01 11:46:45.559605+0800 LoadAndInitializePlot[22604:9665625] +[Father initialize]</span><br><span class="line">2018-02-01 11:46:45.559735+0800 LoadAndInitializePlot[22604:9665625] +[Son(Stiff) initialize]</span><br><span class="line">2018-02-01 11:46:45.559876+0800 LoadAndInitializePlot[22604:9665625] +[Son load]</span><br><span class="line">2018-02-01 11:46:45.560021+0800 LoadAndInitializePlot[22604:9665625] +[Son(Active) load]</span><br><span class="line">2018-02-01 11:46:45.560125+0800 LoadAndInitializePlot[22604:9665625] +[Son(Stiff) load]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Son (Active) 类别在 Son (Stiff) 后编译</span><br><span class="line">2018-02-01 11:50:33.255480+0800 LoadAndInitializePlot[22659:9671829] +[Father load]</span><br><span class="line">2018-02-01 11:50:33.256105+0800 LoadAndInitializePlot[22659:9671829] +[Father initialize]</span><br><span class="line">2018-02-01 11:50:33.256236+0800 LoadAndInitializePlot[22659:9671829] +[Son(Active) initialize]</span><br><span class="line">2018-02-01 11:50:33.256363+0800 LoadAndInitializePlot[22659:9671829] +[Son load]</span><br><span class="line">2018-02-01 11:50:33.256449+0800 LoadAndInitializePlot[22659:9671829] +[Son(Stiff) load]</span><br><span class="line">2018-02-01 11:50:33.256531+0800 LoadAndInitializePlot[22659:9671829] +[Son(Active) load]</span><br></pre></td></tr></table></figure><p>在 Son load 中添加 <code>[self class];</code>，移除 Son 主类和两个类别中的 +initilize 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># `+(void)initialize` 自身未定义，会沿用父类的方法。</span><br><span class="line">2018-02-01 11:54:27.282176+0800 LoadAndInitializePlot[22722:9678734] +[Father load]</span><br><span class="line">2018-02-01 11:54:27.282749+0800 LoadAndInitializePlot[22722:9678734] +[Father initialize]</span><br><span class="line">2018-02-01 11:54:27.282843+0800 LoadAndInitializePlot[22722:9678734] +[Father initialize]</span><br><span class="line">2018-02-01 11:54:27.282955+0800 LoadAndInitializePlot[22722:9678734] +[Son load]</span><br><span class="line">2018-02-01 11:54:27.283046+0800 LoadAndInitializePlot[22722:9678734] +[Son(Stiff) load]</span><br><span class="line">2018-02-01 11:54:27.283157+0800 LoadAndInitializePlot[22722:9678734] +[Son(Active) load]</span><br></pre></td></tr></table></figure></p><p>在 Son load 中添加 <code>[self class];</code>，移除 两个类别的 +initilize 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 根据以上的 runtime 中的分析可知，`+(void)initialize`会“覆盖”类中的方法，只执行一个。</span><br><span class="line">2018-02-01 11:56:00.047404+0800 LoadAndInitializePlot[22756:9681679] +[Father load]</span><br><span class="line">2018-02-01 11:56:00.051067+0800 LoadAndInitializePlot[22756:9681679] +[Father initialize]</span><br><span class="line">2018-02-01 11:56:00.051389+0800 LoadAndInitializePlot[22756:9681679] +[Son initialize]</span><br><span class="line">2018-02-01 11:56:00.051745+0800 LoadAndInitializePlot[22756:9681679] +[Son load]</span><br><span class="line">2018-02-01 11:56:00.052070+0800 LoadAndInitializePlot[22756:9681679] +[Son(Stiff) load]</span><br><span class="line">2018-02-01 11:56:00.052350+0800 LoadAndInitializePlot[22756:9681679] +[Son(Active) load]</span><br></pre></td></tr></table></figure></p><h2 id="一、-void-load-的理解"><a href="#一、-void-load-的理解" class="headerlink" title="一、+(void)load 的理解"></a>一、<code>+(void)load</code> 的理解</h2><p>+load 方法是 Objective-C 中 NSObject 的一个方法，在整个<strong>文件刚被加载</strong>到运行时，在 <strong>main 函数调用之前</strong>被 ObjC runtime 调用的<strong>钩子方法</strong>。</p><h3 id="常见理论知识汇总"><a href="#常见理论知识汇总" class="headerlink" title="常见理论知识汇总"></a>常见理论知识汇总</h3><ul><li>调用顺序：父类 &gt; 子类 &gt; 分类</li><li>调用时机：Objective-C 运行时初始化时，每当有新的镜像<code>library</code> map 到运行时调用。</li><li>调用次数：一次</li><li>线程安全：load 方法是线程安全的，内部使用了锁，应避免线程阻塞在 load 中。 </li><li>常见场景：load 中实现 Method Swizzle。</li><li>one more thing：如果一个类本身没有 load 方法，不管其父类是否实现 load，都不会调用，主类和分类都执行。</li></ul><h3 id="基于-runtime-源码分析"><a href="#基于-runtime-源码分析" class="headerlink" title="基于 runtime 源码分析"></a>基于 runtime 源码分析</h3><p>针对 runtime <a href="https://opensource.apple.com/source/objc4/objc4-706/" target="_blank" rel="noopener">源码 objc4-723 </a>，做一下探讨。<br>xnu 内核为程序准备好之后，将控制权交个 dyld 负责后续工作，dyld 是 Apple 的动态链接器， the dynamic link editor 的缩写。此过程内核态切换到用户态，dyld 在用户态。</p><p>####_objc_init<br>每当 libSystem 在 library 初始化之前都会调用 <code>_objc_init</code>方法，dyld 在方法中注册 load_images 回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* _objc_init</span><br><span class="line">* Bootstrap initialization. Registers our image notifier with dyld.</span><br><span class="line">* Called by libSystem BEFORE library initialization time</span><br><span class="line">**********************************************************************/</span><br><span class="line"># pragma mark - ObjC runtime 初始化 注册 load_images 回调</span><br><span class="line">void _objc_init(void)</span><br><span class="line">&#123;</span><br><span class="line">    static bool initialized = false;</span><br><span class="line">    if (initialized) return;</span><br><span class="line">    initialized = true;</span><br><span class="line">    </span><br><span class="line">    // fixme defer initialization until an objc-using image is found?</span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    static_init();</span><br><span class="line">    lock_init();</span><br><span class="line">    exception_init();</span><br><span class="line"></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_2_images, load_images, unmap_image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="load-images"><a href="#load-images" class="headerlink" title="load_images"></a>load_images</h4><p>所以每当有新的 library 被 map 到 runtime 时，调用 load_images 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* load_images</span><br><span class="line">* Process +load in the given images which are being mapped in by dyld.</span><br><span class="line">*</span><br><span class="line">* Locking: write-locks runtimeLock and loadMethodLock</span><br><span class="line">**********************************************************************/</span><br><span class="line">extern bool hasLoadMethods(const headerType *mhdr);</span><br><span class="line">extern void prepare_load_methods(const headerType *mhdr);</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">load_images(const char *path __unused, const struct mach_header *mh)</span><br><span class="line">&#123;</span><br><span class="line">    // Return without taking locks if there are no +load methods here.</span><br><span class="line">    if (!hasLoadMethods((const headerType *)mh)) return;</span><br><span class="line"></span><br><span class="line">    recursive_mutex_locker_t lock(loadMethodLock);</span><br><span class="line"></span><br><span class="line">    // Discover load methods</span><br><span class="line">    &#123;</span><br><span class="line">        rwlock_writer_t lock2(runtimeLock);</span><br><span class="line">        prepare_load_methods((const headerType *)mh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Call +load methods (without runtimeLock - re-entrant)</span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="prepare-load-methods"><a href="#prepare-load-methods" class="headerlink" title="prepare_load_methods"></a>prepare_load_methods</h4><p>在主类的父类和自身添加到全局静态结构体 loadable_list 中之后，添加主类的分类，将分类添加到全局静态结构体 loadable_categories 中。所以子类优先分类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void prepare_load_methods(const headerType *mhdr)</span><br><span class="line">&#123;</span><br><span class="line">    size_t count, i;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertWriting();</span><br><span class="line"></span><br><span class="line">    classref_t *classlist = </span><br><span class="line">        _getObjc2NonlazyClassList(mhdr, &amp;count);</span><br><span class="line">    for (i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        schedule_class_load(remapClass(classlist[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</span><br><span class="line">    for (i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        category_t *cat = categorylist[i];</span><br><span class="line">        Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">        if (!cls) continue;  // category for ignored weak-linked class</span><br><span class="line">        realizeClass(cls);</span><br><span class="line">        assert(cls-&gt;ISA()-&gt;isRealized());</span><br><span class="line">        add_category_to_loadable_list(cat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="schedule-class-load"><a href="#schedule-class-load" class="headerlink" title="schedule_class_load"></a>schedule_class_load</h4><p>递归调用 schedule_class_load ，在将当前类加入全局静态结构体 loadable_classes 之前，将父类加入其中，待后续加载。保证了父类在子类之前调用 load 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* prepare_load_methods</span><br><span class="line">* Schedule +load for classes in this image, any un-+load-ed </span><br><span class="line">* superclasses in other images, and any categories in this image.</span><br><span class="line">**********************************************************************/</span><br><span class="line">// Recursively schedule +load for cls and any un-+load-ed superclasses.</span><br><span class="line">// cls must already be connected.</span><br><span class="line">static void schedule_class_load(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    if (!cls) return;</span><br><span class="line">    assert(cls-&gt;isRealized());  // _read_images should realize</span><br><span class="line"></span><br><span class="line">    if (cls-&gt;data()-&gt;flags &amp; RW_LOADED) return;</span><br><span class="line"></span><br><span class="line">    // Ensure superclass-first ordering</span><br><span class="line">    schedule_class_load(cls-&gt;superclass);</span><br><span class="line"></span><br><span class="line">    add_class_to_loadable_list(cls);</span><br><span class="line">    cls-&gt;setInfo(RW_LOADED); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="call-load-methods"><a href="#call-load-methods" class="headerlink" title="call_load_methods"></a>call_load_methods</h4><p>当 library 加载到运行时，prepare 调用结束，执行 <code>call_load_methods();</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* call_load_methods</span><br><span class="line">* Call all pending class and category +load methods.</span><br><span class="line">* Class +load methods are called superclass-first. </span><br><span class="line">* Category +load methods are not called until after the parent class&apos;s +load.</span><br><span class="line">* </span><br><span class="line">* This method must be RE-ENTRANT, because a +load could trigger </span><br><span class="line">* more image mapping. In addition, the superclass-first ordering </span><br><span class="line">* must be preserved in the face of re-entrant calls. Therefore, </span><br><span class="line">* only the OUTERMOST call of this function will do anything, and </span><br><span class="line">* that call will handle all loadable classes, even those generated </span><br><span class="line">* while it was running.</span><br><span class="line">*</span><br><span class="line">* The sequence below preserves +load ordering in the face of </span><br><span class="line">* image loading during a +load, and make sure that no </span><br><span class="line">* +load method is forgotten because it was added during </span><br><span class="line">* a +load call.</span><br><span class="line">* Sequence:</span><br><span class="line">* 1. Repeatedly call class +loads until there aren&apos;t any more</span><br><span class="line">* 2. Call category +loads ONCE.</span><br><span class="line">* 3. Run more +loads if:</span><br><span class="line">*    (a) there are more classes to load, OR</span><br><span class="line">*    (b) there are some potential category +loads that have </span><br><span class="line">*        still never been attempted.</span><br><span class="line">* Category +loads are only run once to ensure &quot;parent class first&quot; </span><br><span class="line">* ordering, even if a category +load triggers a new loadable class </span><br><span class="line">* and a new loadable category attached to that class. </span><br><span class="line">*</span><br><span class="line">* Locking: loadMethodLock must be held by the caller </span><br><span class="line">*   All other locks must not be held.</span><br><span class="line">**********************************************************************/</span><br><span class="line">void call_load_methods(void)</span><br><span class="line">&#123;</span><br><span class="line">    static bool loading = NO;</span><br><span class="line">    bool more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    // Re-entrant calls do nothing; the outermost call will finish the job.</span><br><span class="line">    if (loading) return;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    void *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        // 1. Repeatedly call class +loads until there aren&apos;t any more</span><br><span class="line">        while (loadable_classes_used &gt; 0) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2. Call category +loads ONCE</span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        // 3. Run more +loads if there are classes OR more untried categories</span><br><span class="line">    &#125; while (loadable_classes_used &gt; 0  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><p><code>add_class_to_loadable_list</code> 和 <code>add_category_to_loadable_list</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// List of classes that need +load called (pending superclass +load)</span><br><span class="line">// This list always has superclasses first because of the way it is constructed</span><br><span class="line">static struct loadable_class *loadable_classes = nil;</span><br><span class="line">static int loadable_classes_used = 0;</span><br><span class="line">static int loadable_classes_allocated = 0;</span><br><span class="line"></span><br><span class="line">// List of categories that need +load called (pending parent class +load)</span><br><span class="line">static struct loadable_category *loadable_categories = nil;</span><br><span class="line">static int loadable_categories_used = 0;</span><br><span class="line">static int loadable_categories_allocated = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">* add_class_to_loadable_list</span><br><span class="line">* Class cls has just become connected. Schedule it for +load if</span><br><span class="line">* it implements a +load method.</span><br><span class="line">**********************************************************************/</span><br><span class="line">void add_class_to_loadable_list(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = cls-&gt;getLoadMethod();</span><br><span class="line">    if (!method) return;  // Don&apos;t bother if cls has no +load method</span><br><span class="line">    </span><br><span class="line">    if (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(&quot;LOAD: class &apos;%s&apos; scheduled for +load&quot;, </span><br><span class="line">                     cls-&gt;nameForLogging());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">        loadable_classes_allocated = loadable_classes_allocated*2 + 16;</span><br><span class="line">        loadable_classes = (struct loadable_class *)</span><br><span class="line">            realloc(loadable_classes,</span><br><span class="line">                              loadable_classes_allocated *</span><br><span class="line">                              sizeof(struct loadable_class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">    loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">    loadable_classes_used++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">* add_category_to_loadable_list</span><br><span class="line">* Category cat&apos;s parent class exists and the category has been attached</span><br><span class="line">* to its class. Schedule this category for +load after its parent class</span><br><span class="line">* becomes connected and has its own +load method called.</span><br><span class="line">**********************************************************************/</span><br><span class="line">void add_category_to_loadable_list(Category cat)</span><br><span class="line">&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = _category_getLoadMethod(cat);</span><br><span class="line"></span><br><span class="line">    // Don&apos;t bother if cat has no +load method</span><br><span class="line">    if (!method) return;</span><br><span class="line"></span><br><span class="line">    if (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(&quot;LOAD: category &apos;%s(%s)&apos; scheduled for +load&quot;, </span><br><span class="line">                     _category_getClassName(cat), _category_getName(cat));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (loadable_categories_used == loadable_categories_allocated) &#123;</span><br><span class="line">        loadable_categories_allocated = loadable_categories_allocated*2 + 16;</span><br><span class="line">        loadable_categories = (struct loadable_category *)</span><br><span class="line">            realloc(loadable_categories,</span><br><span class="line">                              loadable_categories_allocated *</span><br><span class="line">                              sizeof(struct loadable_category));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadable_categories[loadable_categories_used].cat = cat;</span><br><span class="line">    loadable_categories[loadable_categories_used].method = method;</span><br><span class="line">    loadable_categories_used++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>call_class_loads</code> 和 <code>call_category_loads</code> 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* call_class_loads</span><br><span class="line">* Call all pending class +load methods.</span><br><span class="line">* If new classes become loadable, +load is NOT called for them.</span><br><span class="line">*</span><br><span class="line">* Called only by call_load_methods().</span><br><span class="line">**********************************************************************/</span><br><span class="line">static void call_class_loads(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    </span><br><span class="line">    // Detach current loadable list.</span><br><span class="line">    struct loadable_class *classes = loadable_classes;</span><br><span class="line">    int used = loadable_classes_used;</span><br><span class="line">    loadable_classes = nil;</span><br><span class="line">    loadable_classes_allocated = 0;</span><br><span class="line">    loadable_classes_used = 0;</span><br><span class="line">    </span><br><span class="line">    // Call all +loads for the detached list.</span><br><span class="line">    for (i = 0; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        load_method_t load_method = (load_method_t)classes[i].method;</span><br><span class="line">        if (!cls) continue; </span><br><span class="line"></span><br><span class="line">        if (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(&quot;LOAD: +[%s load]\n&quot;, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, SEL_load);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Destroy the detached list.</span><br><span class="line">    if (classes) free(classes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">* call_category_loads</span><br><span class="line">* Call some pending category +load methods.</span><br><span class="line">* The parent class of the +load-implementing categories has all of </span><br><span class="line">*   its categories attached, in case some are lazily waiting for +initalize.</span><br><span class="line">* Don&apos;t call +load unless the parent class is connected.</span><br><span class="line">* If new categories become loadable, +load is NOT called, and they </span><br><span class="line">*   are added to the end of the loadable list, and we return TRUE.</span><br><span class="line">* Return FALSE if no new categories became loadable.</span><br><span class="line">*</span><br><span class="line">* Called only by call_load_methods().</span><br><span class="line">**********************************************************************/</span><br><span class="line">static bool call_category_loads(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i, shift;</span><br><span class="line">    bool new_categories_added = NO;</span><br><span class="line">    </span><br><span class="line">    // Detach current loadable list.</span><br><span class="line">    struct loadable_category *cats = loadable_categories;</span><br><span class="line">    int used = loadable_categories_used;</span><br><span class="line">    int allocated = loadable_categories_allocated;</span><br><span class="line">    loadable_categories = nil;</span><br><span class="line">    loadable_categories_allocated = 0;</span><br><span class="line">    loadable_categories_used = 0;</span><br><span class="line"></span><br><span class="line">    // Call all +loads for the detached list.</span><br><span class="line">    for (i = 0; i &lt; used; i++) &#123;</span><br><span class="line">        Category cat = cats[i].cat;</span><br><span class="line">        load_method_t load_method = (load_method_t)cats[i].method;</span><br><span class="line">        Class cls;</span><br><span class="line">        if (!cat) continue;</span><br><span class="line"></span><br><span class="line">        cls = _category_getClass(cat);</span><br><span class="line">        if (cls  &amp;&amp;  cls-&gt;isLoadable()) &#123;</span><br><span class="line">            if (PrintLoading) &#123;</span><br><span class="line">                _objc_inform(&quot;LOAD: +[%s(%s) load]\n&quot;, </span><br><span class="line">                             cls-&gt;nameForLogging(), </span><br><span class="line">                             _category_getName(cat));</span><br><span class="line">            &#125;</span><br><span class="line">            (*load_method)(cls, SEL_load);</span><br><span class="line">            cats[i].cat = nil;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Compact detached list (order-preserving)</span><br><span class="line">    shift = 0;</span><br><span class="line">    for (i = 0; i &lt; used; i++) &#123;</span><br><span class="line">        if (cats[i].cat) &#123;</span><br><span class="line">            cats[i-shift] = cats[i];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            shift++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    used -= shift;</span><br><span class="line"></span><br><span class="line">    // Copy any new +load candidates from the new list to the detached list.</span><br><span class="line">    new_categories_added = (loadable_categories_used &gt; 0);</span><br><span class="line">    for (i = 0; i &lt; loadable_categories_used; i++) &#123;</span><br><span class="line">        if (used == allocated) &#123;</span><br><span class="line">            allocated = allocated*2 + 16;</span><br><span class="line">            cats = (struct loadable_category *)</span><br><span class="line">                realloc(cats, allocated *</span><br><span class="line">                                  sizeof(struct loadable_category));</span><br><span class="line">        &#125;</span><br><span class="line">        cats[used++] = loadable_categories[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Destroy the new list.</span><br><span class="line">    if (loadable_categories) free(loadable_categories);</span><br><span class="line"></span><br><span class="line">    // Reattach the (now augmented) detached list. </span><br><span class="line">    // But if there&apos;s nothing left to load, destroy the list.</span><br><span class="line">    if (used) &#123;</span><br><span class="line">        loadable_categories = cats;</span><br><span class="line">        loadable_categories_used = used;</span><br><span class="line">        loadable_categories_allocated = allocated;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (cats) free(cats);</span><br><span class="line">        loadable_categories = nil;</span><br><span class="line">        loadable_categories_used = 0;</span><br><span class="line">        loadable_categories_allocated = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (PrintLoading) &#123;</span><br><span class="line">        if (loadable_categories_used != 0) &#123;</span><br><span class="line">            _objc_inform(&quot;LOAD: %d categories still waiting for +load\n&quot;,</span><br><span class="line">                         loadable_categories_used);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return new_categories_added;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="void-initialize-的理解"><a href="#void-initialize-的理解" class="headerlink" title="+(void)initialize 的理解"></a><code>+(void)initialize</code> 的理解</h2><p><code>+(void)initialize</code> 是在类或者它的子类收到第一条消息（实例方法、类方法）之前被调用的。</p><h3 id="常见理论知识汇总-1"><a href="#常见理论知识汇总-1" class="headerlink" title="常见理论知识汇总"></a>常见理论知识汇总</h3><ul><li>调用顺序：父类 &gt; 子类（或分类）</li><li>调用时机：Objective-C 运行时初始化时，每当有新的镜像<code>library</code> map 到运行时调用。</li><li>调用次数：多次，如果子类未实现<code>+(void)initialize</code> ，父类<code>+(void)initialize</code> 会被调用多次</li><li>线程安全：在initialize方法收到调用时，运行环境基本健全。initialize的运行过程中是能保证线程安全的。</li><li>常见场景：稍微广泛，初始化工作，或者单例模式的实现方案。</li></ul><h3 id="基于-runtime-源码分析-1"><a href="#基于-runtime-源码分析-1" class="headerlink" title="基于 runtime 源码分析"></a>基于 runtime 源码分析</h3><h4 id="lookUpImpOrForward"><a href="#lookUpImpOrForward" class="headerlink" title="lookUpImpOrForward"></a>lookUpImpOrForward</h4><p>当一个类收到消息时，runtime 会通过 <code>IMP lookUpImpOrForward(Class cls, SEL sel, id inst,                        bool initialize, bool cache, bool resolver)</code> 方法查找方法的实现返回函数指针 IMP，或者进行消息转发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* lookUpImpOrForward.</span><br><span class="line">* The standard IMP lookup. </span><br><span class="line">* initialize==NO tries to avoid +initialize (but sometimes fails)</span><br><span class="line">* cache==NO skips optimistic unlocked lookup (but uses cache elsewhere)</span><br><span class="line">* Most callers should use initialize==YES and cache==YES.</span><br><span class="line">* inst is an instance of cls or a subclass thereof, or nil if none is known. </span><br><span class="line">*   If cls is an un-initialized metaclass then a non-nil inst is faster.</span><br><span class="line">* May return _objc_msgForward_impcache. IMPs destined for external use </span><br><span class="line">*   must be converted to _objc_msgForward or _objc_msgForward_stret.</span><br><span class="line">*   If you don&apos;t want forwarding at all, use lookUpImpOrNil() instead.</span><br><span class="line">**********************************************************************/</span><br><span class="line">IMP lookUpImpOrForward(Class cls, SEL sel, id inst, </span><br><span class="line">                       bool initialize, bool cache, bool resolver)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    if (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</span><br><span class="line">        _class_initialize (_class_getNonMetaClass(cls, inst));</span><br><span class="line">        // If sel == initialize, _class_initialize will send +initialize and </span><br><span class="line">        // then the messenger will send +initialize again after this </span><br><span class="line">        // procedure finishes. Of course, if this is not being called </span><br><span class="line">        // from the messenger then it won&apos;t happen. 2778172</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="class-initialize"><a href="#class-initialize" class="headerlink" title="_class_initialize"></a>_class_initialize</h4><p>如果类没有被初始化，会调用 <code>_class_initialize</code> 进行初始化，对入参的参数父类递归的调用 <code>_class_initialize</code>，这也就是父类优先子类调用的本质。是不是对「Talk is cheap. Show me the code.」深表体会；）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* class_initialize.  Send the &apos;+initialize&apos; message on demand to any</span><br><span class="line">* uninitialized class. Force initialization of superclasses first.</span><br><span class="line">**********************************************************************/</span><br><span class="line">void _class_initialize(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    assert(!cls-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    Class supercls;</span><br><span class="line">    bool reallyInitialize = NO;</span><br><span class="line"></span><br><span class="line">    // Make sure super is done initializing BEFORE beginning to initialize cls.</span><br><span class="line">    // See note about deadlock above.</span><br><span class="line">    supercls = cls-&gt;superclass;</span><br><span class="line">    if (supercls  &amp;&amp;  !supercls-&gt;isInitialized()) &#123;</span><br><span class="line">        _class_initialize(supercls);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Try to atomically set CLS_INITIALIZING.</span><br><span class="line">    &#123;</span><br><span class="line">        monitor_locker_t lock(classInitLock);</span><br><span class="line">        if (!cls-&gt;isInitialized() &amp;&amp; !cls-&gt;isInitializing()) &#123;</span><br><span class="line">            cls-&gt;setInitializing();</span><br><span class="line">            reallyInitialize = YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (reallyInitialize) &#123;</span><br><span class="line">        // We successfully set the CLS_INITIALIZING bit. Initialize the class.</span><br><span class="line">        </span><br><span class="line">        // Record that we&apos;re initializing this class so we can message it.</span><br><span class="line">        _setThisThreadIsInitializingClass(cls);</span><br><span class="line">        </span><br><span class="line">        // Send the +initialize message.</span><br><span class="line">        // Note that +initialize is sent to the superclass (again) if </span><br><span class="line">        // this class doesn&apos;t implement +initialize. 2157218</span><br><span class="line">        if (PrintInitializing) &#123;</span><br><span class="line">            _objc_inform(&quot;INITIALIZE: calling +[%s initialize]&quot;,</span><br><span class="line">                         cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Exceptions: A +initialize call that throws an exception </span><br><span class="line">        // is deemed to be a complete and successful +initialize.</span><br><span class="line">        @try &#123;</span><br><span class="line">            callInitialize(cls);</span><br><span class="line"></span><br><span class="line">            if (PrintInitializing) &#123;</span><br><span class="line">                _objc_inform(&quot;INITIALIZE: finished +[%s initialize]&quot;,</span><br><span class="line">                             cls-&gt;nameForLogging());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @catch (...) &#123;</span><br><span class="line">            if (PrintInitializing) &#123;</span><br><span class="line">                _objc_inform(&quot;INITIALIZE: +[%s initialize] threw an exception&quot;,</span><br><span class="line">                             cls-&gt;nameForLogging());</span><br><span class="line">            &#125;</span><br><span class="line">            @throw;</span><br><span class="line">        &#125;</span><br><span class="line">        @finally &#123;</span><br><span class="line">            // Done initializing. </span><br><span class="line">            // If the superclass is also done initializing, then update </span><br><span class="line">            //   the info bits and notify waiting threads.</span><br><span class="line">            // If not, update them later. (This can happen if this +initialize </span><br><span class="line">            //   was itself triggered from inside a superclass +initialize.)</span><br><span class="line">            monitor_locker_t lock(classInitLock);</span><br><span class="line">            if (!supercls  ||  supercls-&gt;isInitialized()) &#123;</span><br><span class="line">                _finishInitializing(cls, supercls);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                _finishInitializingAfter(cls, supercls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    else if (cls-&gt;isInitializing()) &#123;</span><br><span class="line">        // We couldn&apos;t set INITIALIZING because INITIALIZING was already set.</span><br><span class="line">        // If this thread set it earlier, continue normally.</span><br><span class="line">        // If some other thread set it, block until initialize is done.</span><br><span class="line">        // It&apos;s ok if INITIALIZING changes to INITIALIZED while we&apos;re here, </span><br><span class="line">        //   because we safely check for INITIALIZED inside the lock </span><br><span class="line">        //   before blocking.</span><br><span class="line">        if (_thisThreadIsInitializingClass(cls)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            waitForInitializeToComplete(cls);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    else if (cls-&gt;isInitialized()) &#123;</span><br><span class="line">        // Set CLS_INITIALIZING failed because someone else already </span><br><span class="line">        //   initialized the class. Continue normally.</span><br><span class="line">        // NOTE this check must come AFTER the ISINITIALIZING case.</span><br><span class="line">        // Otherwise: Another thread is initializing this class. ISINITIALIZED </span><br><span class="line">        //   is false. Skip this clause. Then the other thread finishes </span><br><span class="line">        //   initialization and sets INITIALIZING=no and INITIALIZED=yes. </span><br><span class="line">        //   Skip the ISINITIALIZING clause. Die horribly.</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    else &#123;</span><br><span class="line">        // We shouldn&apos;t be here. </span><br><span class="line">        _objc_fatal(&quot;thread-safe class init in objc runtime is buggy!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>callInitialize 中使用 objc_msgSend 方式对 +(void)initialize 进行调用，也就是和普通方法走消息发送的流程，如果子类没有实现，走父类的方法，如果分类实现，就会对主类进行“覆盖”，如果多个分类，不确定调用哪一个分类的同名方法，需要看编译的过程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void callInitialize(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    ((void(*)(Class, SEL))objc_msgSend)(cls, SEL_initialize);</span><br><span class="line">    asm(&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>如果子类没有实现 <code>+(void)initialize</code>，父类会被调用多次，只想调用父类 initialize 一次呢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (void)initialize &#123;</span><br><span class="line">  if (self == [ClassName self]) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 或者 dispatch_once 了</span><br></pre></td></tr></table></figure></p><h3 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h3><ul><li><a href="https://www.mikeash.com/pyblog/friday-qa-2009-05-22-objective-c-class-loading-and-initialization.html" target="_blank" rel="noopener">Objective-C Class Loading and Initialization</a></li><li><a href="http://blog.iderzheng.com/objective-c-load-vs-initialize/" target="_blank" rel="noopener">Objective C类方法load和initialize的区别</a></li><li><a href="http://nshipster.com/method-swizzling/" target="_blank" rel="noopener">Method Swizzling</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 &lt;code&gt;runtime&lt;/code&gt; 源码，理解 &lt;code&gt;+(void)load&lt;/code&gt; 和 &lt;code&gt;+(void)initialize&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h2 id=&quot;零、官方文档&quot;&gt;&lt;a href=&quot;#零、官方文档&quot; class=&quot;h
      
    
    </summary>
    
      <category term="iOS" scheme="http://grackanil.top/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://grackanil.top/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://grackanil.top/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Tutorial - NexT 主题配置和第三方服务</title>
    <link href="http://grackanil.top/2019/05/01/hexo-theme-tutorial/"/>
    <id>http://grackanil.top/2019/05/01/hexo-theme-tutorial/</id>
    <published>2019-05-01T05:24:52.395Z</published>
    <updated>2019-05-01T05:24:52.395Z</updated>
    
    <content type="html"><![CDATA[<p>简谈 NexT 主题的配置和第三方的服务的接入。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一篇完成了简单个人主页的搭建，然而，追求美的脚步和好奇心的滋生，难以遏制。</p><h2 id="NexT-主题配置"><a href="#NexT-主题配置" class="headerlink" title="NexT 主题配置"></a>NexT 主题配置</h2><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT 主题配置官网文档</a>，有详尽的配置，如设置 RSS、设置字体、设置代码高亮主题、侧边栏社交链接、开启打赏功能、友情链接、腾讯公益404等。</p><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入站点根目录</span></span><br><span class="line"><span class="variable">$cd</span> your-hexo-site</span><br><span class="line"><span class="comment"># 新建名为 tags 的页面</span></span><br><span class="line"><span class="variable">$hexo</span> new page tags</span><br></pre></td></tr></table></figure><p>打开新建 tags 页面，将类型设为 tags。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2017-12-30 12:39:04</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line"><span class="comment"># 如果集成了评论服务，在标签页禁用该功能</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>编辑主题配置文件， 添加 tags 到 menu 中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br></pre></td></tr></table></figure></p><p>包含标签的文章<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line">    - Testing</span><br><span class="line">    - Another Tag</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入站点根目录</span></span><br><span class="line"><span class="variable">$cd</span> your-hexo-site</span><br><span class="line"><span class="comment"># 新建名为 categories 的页面</span></span><br><span class="line"><span class="variable">$hexo</span> new page categories</span><br></pre></td></tr></table></figure><p>打开新建 categories 页面，将类型设为 categories。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2017-12-30 12:39:04</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line"><span class="comment"># 如果集成了评论服务，在分类页禁用该功能</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>编辑主题配置文件， 添加 categories 到 menu 中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  categories: /categories</span><br></pre></td></tr></table></figure></p><p>包含分类的文章<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试文章</span><br><span class="line">categories: Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h3 id="添加-RSS-订阅"><a href="#添加-RSS-订阅" class="headerlink" title="添加 RSS 订阅"></a>添加 RSS 订阅</h3><p>因为已经有成熟的依赖模块，所以添加 RSS 订阅很简单，进入<code>站点目录</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>主题配置目录</code>配置文件中修改 RSS 配置，参见注释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line">rss:</span><br></pre></td></tr></table></figure></p><p>在<code>站点目录</code>配置文件中，添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br></pre></td></tr></table></figure></p><p>The last but not least，在<code>站点目录</code>配置文件中，配置 URL 为自己网站的地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://grackanil.top</span><br></pre></td></tr></table></figure></p><h3 id="在上角添加fork-me-on-github"><a href="#在上角添加fork-me-on-github" class="headerlink" title="在上角添加fork me on github"></a>在上角添加<code>fork me on github</code></h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/hexo_fork_me_on_github.png" alt="fork me"><br>提供两个获取样式的站点，<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">GitHub Ribbons</a>和<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a><br>考虑到适配移动端适配，重叠于菜单按钮，我取的是 GitHub Corners 的右上角的样式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 https://your-url 、fill:#151513; 和 color:#fff;</span></span><br><span class="line">&lt;a href=<span class="string">"https://your-url"</span> class=<span class="string">"github-corner"</span> aria-label=<span class="string">"View source on Github"</span>&gt;&lt;svg width=<span class="string">"80"</span> height=<span class="string">"80"</span> viewBox=<span class="string">"0 0 250 250"</span> style=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;path d=<span class="string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span>&gt;&lt;/path&gt;&lt;path d=<span class="string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span> fill=<span class="string">"currentColor"</span> style=<span class="string">"transform-origin: 130px 106px;"</span> class=<span class="string">"octo-arm"</span>&gt;&lt;/path&gt;&lt;path d=<span class="string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span> fill=<span class="string">"currentColor"</span> class=<span class="string">"octo-body"</span>&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>粘贴样式代码至 <code>themes/next/layout/_layout.swig</code> 文件中<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下。</p><h2 id="NexT-主题第三方服务接入"><a href="#NexT-主题第三方服务接入" class="headerlink" title="NexT 主题第三方服务接入"></a>NexT 主题第三方服务接入</h2><h3 id="Jiathis，网站社会化工具。"><a href="#Jiathis，网站社会化工具。" class="headerlink" title="Jiathis，网站社会化工具。"></a><a href="http://www.jiathis.com/" target="_blank" rel="noopener">Jiathis</a>，网站社会化工具。</h3><p>注册 JiaThis，获取 uid。<br><img src="http://oxwk2uou0.bkt.clouddn.com/hexo_jiathis.png" alt="注册JiaThis"><br>配置主题配置文件 JiaThis。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment"># This plugin is more useful in China, make sure you known how to use it.</span></span><br><span class="line"><span class="comment"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span></span><br><span class="line"><span class="comment"># Warning: JiaThis does not support https.</span></span><br><span class="line">jiathis:</span><br><span class="line">    <span class="comment">#Get this uid from http://www.jiathis.com/</span></span><br><span class="line">    uid: xxxxxx</span><br></pre></td></tr></table></figure></p><h3 id="不蒜子，网站计数。"><a href="#不蒜子，网站计数。" class="headerlink" title="不蒜子，网站计数。"></a><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，网站计数。</h3><p>详细<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">文档</a>，配置好主题配置文件即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: &lt;i class=<span class="string">"fa fa-file-o"</span>&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure></p><h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a><a href="https://valine.js.org" target="_blank" rel="noopener">Valine</a></h3><p><code>Valine</code>是一款基于<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>的快速、简洁且高效的无后端评论系统。可以查看详细的 <a href="https://valine.js.org" target="_blank" rel="noopener">Valine 文档</a>。</p><h3 id="七牛云，作为文章图片对象存储。"><a href="#七牛云，作为文章图片对象存储。" class="headerlink" title="七牛云，作为文章图片对象存储。"></a><a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>，作为文章图片对象存储。</h3><p>考虑到便于迁移博客，图床必须要，七牛访问速度快，支持日志，防盗链和水印。<br>免费用户有<code>10GB流量/每月</code>+<code>总空间10GB</code>+<code>PUT/DELETE 10万请求</code>+<code>GET 100万请求</code>，对于个人主页足够了，另外，可以邀请好友获得奖励。这是我的<a href="https://portal.qiniu.com/signup?code=3ljo5qrunzqz6" target="_blank" rel="noopener">邀请</a>：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简谈 NexT 主题的配置和第三方的服务的接入。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一篇完成了简单个人主页的搭建，然而，追求美的脚步和好奇心的滋生，难以遏制。
      
    
    </summary>
    
      <category term="兜" scheme="http://grackanil.top/categories/%E5%85%9C/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Hexo" scheme="http://grackanil.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Tutorial - 基本搭建和配置</title>
    <link href="http://grackanil.top/2019/05/01/hexo-tutorial/"/>
    <id>http://grackanil.top/2019/05/01/hexo-tutorial/</id>
    <published>2019-05-01T05:24:52.395Z</published>
    <updated>2019-05-01T05:24:52.396Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次 Hexo 从零开始搭建的历程。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就了解到可以通过 GitHub 托管静态网页，使用 Hexo 和 GitHub Pages 方便快捷地搭建个人博客网站，也一直想通过一种方式整理和管理知识，遂从零开始搭建、配置属于自己的博客网站。</p><h2 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 是一个面向开源及私有软件项目的托管平台。最好最详细的教程是 <a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener">官方文档</a> 望多查阅。以下是我简要说明，有错误还望指正包涵。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_login.png" alt="GitHub Register"></p><h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><p>登录注册邮箱，验证账号。<br><img src="http://oxwk2uou0.bkt.clouddn.com/github_login_5.png" alt="验证邮箱"></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_login_3.png" alt="创建仓库"><br><img src="http://oxwk2uou0.bkt.clouddn.com/github_login_4.png" alt="创建完成"></p><h3 id="通过-SSH-建立连接，详见-文档-，使用-SSH-协议，每次访问可以无需用户名和密码连接-GitHub-。"><a href="#通过-SSH-建立连接，详见-文档-，使用-SSH-协议，每次访问可以无需用户名和密码连接-GitHub-。" class="headerlink" title="通过 SSH 建立连接，详见 文档 ，使用 SSH 协议，每次访问可以无需用户名和密码连接 GitHub 。"></a>通过 SSH 建立连接，详见 <a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">文档</a> ，使用 SSH 协议，每次访问可以无需用户名和密码连接 GitHub 。</h3><h4 id="检查是否已经存在-SSH-keys"><a href="#检查是否已经存在-SSH-keys" class="headerlink" title="检查是否已经存在 SSH keys"></a>检查是否已经存在 SSH keys</h4><p>打开终端，使用<code>ls -al ~/.ssh</code>查看，如果在<code>.ssh</code>目录下存在文件列表，说明已经存在 SSH keys 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line">total 24</span><br><span class="line">drwx------    5 gekang  staff   160  9 26 10:03 .</span><br><span class="line">drwxr-xr-x+ 115 gekang  staff  3680 12 31 14:04 ..</span><br><span class="line">-rw-------    1 gekang  staff  1675  9  8 19:59 id_rsa</span><br><span class="line">-rw-------    1 gekang  staff   398  9  8 19:59 id_rsa.pub</span><br><span class="line">-rw-r--r--    1 gekang  staff  2178 12 27 23:30 known_hosts</span><br></pre></td></tr></table></figure></p><h4 id="如果没有-public-key-，生成-SSH；如果已经有了，直接配置即可"><a href="#如果没有-public-key-，生成-SSH；如果已经有了，直接配置即可" class="headerlink" title="如果没有 public key ，生成 SSH；如果已经有了，直接配置即可"></a>如果没有 public key ，生成 SSH；如果已经有了，直接配置即可</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen -t rsa -C "yourmail@xxx.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">&lt;!-- 直接输入回车即可 --&gt;</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>要求输入密码，可以一路回车。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Kf8+luLAnbCkfUxraCX88K9x4WJHqym+WItUPr5sr yourmail@xxx.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|    o +          |</span></span><br><span class="line"><span class="string">|   . B . .       |</span></span><br><span class="line"><span class="string">|  + o X S        |</span></span><br><span class="line"><span class="string">|  .* S @ o       |</span></span><br><span class="line"><span class="string">| .o.= @ O  .     |</span></span><br><span class="line"><span class="string">| o+B = =..+      |</span></span><br><span class="line"><span class="string">|.+E+. ...+o.     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></p><h4 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h4><ul><li>找到 id_rsa.pub 中的 public key ，位置如上路径，复制出 public key。<br>复制 public key 时，不要重起一行，添加空格，可以使用<code>pbcopy &lt; ~/.ssh/id_rsa.pub</code>复制到剪贴板</li><li>进入 GitHub Setting 页面，配置 SSH。<br><img src="http://oxwk2uou0.bkt.clouddn.com/github_ssh_3.png" alt="配置SSH"></li><li>创建 SSH ，title 任意输入，粘贴 public key ，然后 Add SSH key。</li></ul><h4 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能看到警告：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>验证 fingerprint ,然后 type yes<br>然后，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">provide shell access.</span></span><br></pre></td></tr></table></figure></p><h2 id="简述-GitHub-Pages"><a href="#简述-GitHub-Pages" class="headerlink" title="简述 GitHub Pages"></a>简述 GitHub Pages</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>是 GitHub 提供的一个静态网站托管服务。同样，<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">官方文档</a>是最好的教程。<br><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_1.png" alt="官网首页"></p><h3 id="GitHub-Pages-可以用为两种类型：用户或组织主页；项目工程主页。"><a href="#GitHub-Pages-可以用为两种类型：用户或组织主页；项目工程主页。" class="headerlink" title="GitHub Pages 可以用为两种类型：用户或组织主页；项目工程主页。"></a>GitHub Pages 可以用为两种类型：用户或组织主页；项目工程主页。</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_7.png" alt="类型"></p><h3 id="搭建个人主页，以username-github-io名创建仓库"><a href="#搭建个人主页，以username-github-io名创建仓库" class="headerlink" title="搭建个人主页，以username.github.io名创建仓库"></a>搭建个人主页，以<code>username.github.io</code>名创建仓库</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_2.png" alt="搭建个人主页"></p><h3 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_3.png" alt="克隆仓库"></p><h3 id="本地编辑个人静态主页"><a href="#本地编辑个人静态主页" class="headerlink" title="本地编辑个人静态主页"></a>本地编辑个人静态主页</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_4.png" alt="克隆仓库"></p><h3 id="Push-到远程仓库。"><a href="#Push-到远程仓库。" class="headerlink" title="Push 到远程仓库。"></a>Push 到远程仓库。</h3><p>此处说明，若使用 SSH ，创建 GitHub 已建立 SSH 连接，可以直接 Push；若无，建立连接，或者使用 Https 推送到远程仓库，其间需要输入用户名和密码。<br><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_5.png" alt="克隆仓库"></p><h3 id="以上若都成功，访问个人主页，https-username-github-io"><a href="#以上若都成功，访问个人主页，https-username-github-io" class="headerlink" title="以上若都成功，访问个人主页，https://username.github.io."></a>以上若都成功，访问个人主页，<code>https://username.github.io.</code></h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_pages_6.png" alt="克隆仓库"></p><h2 id="域名注册、绑定"><a href="#域名注册、绑定" class="headerlink" title="域名注册、绑定"></a>域名注册、绑定</h2><p>我的个人主页是万网注册的域名，所以简述<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>域名购买和绑定。同样也有很详细的<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">文档</a></p><h3 id="注册登录阿里云"><a href="#注册登录阿里云" class="headerlink" title="注册登录阿里云"></a>注册登录<a href="https://www.aliyun.com" target="_blank" rel="noopener">阿里云</a></h3><h3 id="购买域名，进入控制中心"><a href="#购买域名，进入控制中心" class="headerlink" title="购买域名，进入控制中心"></a>购买域名，进入控制中心</h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/github_domain_name.png" alt="控制中心"></p><h3 id="管理域名，添加域名解析"><a href="#管理域名，添加域名解析" class="headerlink" title="管理域名，添加域名解析"></a>管理域名，添加域名解析</h3><p>GitHub 推荐使用 www 的二级域名，给域名添加解析，记录类型都是 A 记录，记录值全部对应刚才 ping 出来的 IP 。<br><img src="http://oxwk2uou0.bkt.clouddn.com/github_cname.png" alt="设置域名解析"></p><h3 id="添加CNAME文件到github仓库"><a href="#添加CNAME文件到github仓库" class="headerlink" title="添加CNAME文件到github仓库"></a>添加CNAME文件到github仓库</h3><p>由于<code>hexo d</code>部署时，依据<code>.gitignore</code>文件，会清除所有文件，所以如要将 CNAME 部署到 GitHub 中，必须将 CNAME 放置 source 文件夹中（可以放在后面 Hexo 安装后，初始化项目中 source 目录下）。CNAME 文件中是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 域名为grackanil.top</span></span><br><span class="line"><span class="comment"># 二级域名</span></span><br><span class="line">www.grackanil.top</span><br><span class="line"><span class="comment"># 一级域名</span></span><br><span class="line">grackanil.top</span><br></pre></td></tr></table></figure></p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>安装 Hexo 相当简单。<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="如果安装了-Node-js-和-Git，只需要使用-npm-即可完成-Hexo-的安装"><a href="#如果安装了-Node-js-和-Git，只需要使用-npm-即可完成-Hexo-的安装" class="headerlink" title="如果安装了 Node.js 和 Git，只需要使用 npm 即可完成 Hexo 的安装"></a>如果安装了 <code>Node.js</code> 和 <code>Git</code>，只需要使用 <code>npm</code> 即可完成 <code>Hexo</code> 的安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="如果没有安装-Node-js-和-Git，以下均为-Mac-环境下。"><a href="#如果没有安装-Node-js-和-Git，以下均为-Mac-环境下。" class="headerlink" title="如果没有安装 Node.js 和 Git，以下均为 Mac 环境下。"></a>如果没有安装 <code>Node.js</code> 和 <code>Git</code>，以下均为 Mac 环境下。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 brew 安装 git</span></span><br><span class="line">brew install git</span><br><span class="line"><span class="comment"># 可以使用 cURL 安装 nvm</span></span><br><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class="line"><span class="comment"># 也可以 使用 Wget 安装 nvm</span></span><br><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class="line"><span class="comment"># 使用最佳安装方式：nvm 安装 Node.js</span></span><br><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化-Hexo-建站"><a href="#初始化-Hexo-建站" class="headerlink" title="初始化 Hexo 建站"></a>初始化 Hexo 建站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 Hexo，会在目标文件夹建立网站所需要的所有文件</span></span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">$ npm install</span><br><span class="line"><span class="comment"># 查看项目第一层目录</span></span><br><span class="line">$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br><span class="line"><span class="comment"># 更改后清除静态文件夹的内容并删掉</span></span><br><span class="line">$ hexo clean </span><br><span class="line"><span class="comment"># 本地启动服务</span></span><br><span class="line"><span class="comment"># hexo generate ，生成静态文件到 public 文件夹</span></span><br><span class="line">$ hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">...</span><br><span class="line">INFO  Generated: 2018/01/01/hello-world/index.html</span><br><span class="line">INFO  28 files generated <span class="keyword">in</span> 916 ms</span><br><span class="line"><span class="comment"># hexo server，在本地服务器运行</span></span><br><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><h3 id="访问-http-localhost-4000"><a href="#访问-http-localhost-4000" class="headerlink" title="访问 http://localhost:4000/"></a>访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></h3><p><img src="http://oxwk2uou0.bkt.clouddn.com/hexo_1.png" alt="预览"></p><h3 id="部署到-GitHub，前提是已经注册-GitHub，创建-username-github-io-仓库"><a href="#部署到-GitHub，前提是已经注册-GitHub，创建-username-github-io-仓库" class="headerlink" title="部署到 GitHub，前提是已经注册 GitHub，创建 username.github.io 仓库"></a>部署到 GitHub，前提是已经注册 <code>GitHub</code>，创建 <code>username.github.io</code> 仓库</h3><h4 id="安装-GitHub-依赖插件"><a href="#安装-GitHub-依赖插件" class="headerlink" title="安装 GitHub 依赖插件"></a>安装 GitHub 依赖插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="配置更目录下的-config-yml文件"><a href="#配置更目录下的-config-yml文件" class="headerlink" title="配置更目录下的 _config.yml文件"></a>配置更目录下的 <code>_config.yml</code>文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: ssh://git@github.com/grackanil/grackanil.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署，hexo deploy</span></span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><h3 id="访问个人主页"><a href="#访问个人主页" class="headerlink" title="访问个人主页"></a>访问个人主页</h3><p>访问 username.github.io，如 grackanil.github.io，根目录 <code>source</code> 下已经创建<code>CNAME</code>，绑定自定义域名，可以访问域名。</p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>Hexo 安装主题很方便，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。以安装NexT为例，可以访问<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题文档</a>。</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入站点目录</span></span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line"><span class="comment"># checkout 代码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="修改站点配置目录"><a href="#修改站点配置目录" class="headerlink" title="修改站点配置目录"></a>修改站点配置目录</h3><p>根目录下的<code>站点配置文件</code> <strong>config.yml，区别于主题目录下的<code>主题配置文件</code></strong>config.yml。启动主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>使用 <code>hexo clean</code> 来清除 Hexo 的缓存，启动服务 <code>hexo s --debug</code>，待成功后，访问<code>http://localhost:4000</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，简单的 NexT 默认配置主题的 Hexo 静态个人主页就搭建完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一次 Hexo 从零开始搭建的历程。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很早就了解到可以通过 GitHub 托管静态网页，使用 Hexo 和 GitHub 
      
    
    </summary>
    
      <category term="兜" scheme="http://grackanil.top/categories/%E5%85%9C/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Hexo" scheme="http://grackanil.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - 闲理字符串</title>
    <link href="http://grackanil.top/2019/05/01/ruby-string/"/>
    <id>http://grackanil.top/2019/05/01/ruby-string/</id>
    <published>2019-05-01T05:24:47.917Z</published>
    <updated>2019-05-01T05:24:47.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>Ruby 字符串类型为 String</p><ul><li><p>默认使用 Unicode 字符集，可以直接转码，操作 UTF-8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?&gt; &quot;Hello&quot;.class</span><br><span class="line">=&gt; String</span><br><span class="line">?&gt; &apos;中国&apos;.to_s</span><br><span class="line">=&gt; &quot;中国&quot;</span><br><span class="line">?&gt; &apos;中国&apos;.encoding.to_s</span><br><span class="line">=&gt; &quot;UTF-8&quot;</span><br></pre></td></tr></table></figure></li><li><p>多行字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 其中 &#123;&#125; 可以换成 &lt;&gt; ## !! 等</span><br><span class="line">?&gt; z = %q&#123;My name is</span><br><span class="line">Grac</span><br><span class="line">Kanil</span><br><span class="line">.&#125;</span><br><span class="line">=&gt; &quot;My name is\nGrac\nKanil\n.&quot;</span><br></pre></td></tr></table></figure></li><li><p>快速定义字符串数组，%w{}使用空白符分隔字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?&gt; x = %w&#123;a b c d&#125;</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">&gt;&gt; y = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">&gt;&gt; x == y</span><br><span class="line">=&gt; false</span><br><span class="line">&gt;&gt; y &lt;&lt; &quot;d&quot;</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; x == y</span><br><span class="line">=&gt; true</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; x.class</span><br><span class="line">=&gt; Array</span><br></pre></td></tr></table></figure></li><li><p>Ruby Doc 文档模式字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &lt;&lt;END_GEK</span><br><span class="line">This is the Document</span><br><span class="line">And this is pretty.</span><br><span class="line">END_GEK</span><br></pre></td></tr></table></figure></li><li><p>字符串连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot; + &quot;ruby&quot;</span><br><span class="line">#=&gt; &quot;helloruby&quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串复制多次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;abc&quot; * 3</span><br><span class="line">#=&gt; &quot;abcabcabc&quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串比较，以 ASCII 值比较，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">puts &quot;x&quot; &gt; &quot;y&quot;</span><br><span class="line">#=&gt; false</span><br><span class="line"></span><br><span class="line"># 获取字符 ASCII 值，Ruby 版本不同不同</span><br><span class="line">puts ?x</span><br><span class="line">puts &quot;x&quot;.ord</span><br><span class="line">#=&gt; 120</span><br><span class="line"></span><br><span class="line"># ASCII 值获取字符</span><br><span class="line">puts 120.chr</span><br><span class="line">#=&gt; &quot;x&quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串插写，和其他模板语言类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; puts &quot;#&#123;10 + 20&#125;&quot;</span><br><span class="line">30</span><br><span class="line">=&gt; nil</span><br><span class="line">?&gt; puts &quot;#&#123; &quot;cool&quot; * 2 &#125;&quot;</span><br><span class="line">coolcool</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><ul><li><p>字符串长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;GracKanil&quot;.length</span><br><span class="line">#=&gt; 9</span><br><span class="line"></span><br><span class="line">&quot;GracKanil&quot;.size</span><br><span class="line">#=&gt; 9</span><br></pre></td></tr></table></figure></li><li><p>大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac&quot;.upcase</span><br><span class="line">=&gt; &quot;GRAC&quot;</span><br><span class="line">&gt;&gt; &quot;Grac&quot;.downcase</span><br><span class="line">=&gt; &quot;grac&quot;</span><br></pre></td></tr></table></figure></li><li><p>逆序和大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac&quot;.reverse</span><br><span class="line">=&gt; &quot;carG&quot;</span><br><span class="line">&gt;&gt; &quot;Grac&quot;.swapcase</span><br><span class="line">=&gt; &quot;gRAC&quot;</span><br><span class="line">&gt;&gt; &quot;Grac&quot;.reverse.upcase</span><br><span class="line">=&gt; &quot;CARG&quot;</span><br></pre></td></tr></table></figure></li><li><p>hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac&quot;.hash</span><br><span class="line">=&gt; -4302903494964065754</span><br></pre></td></tr></table></figure></li><li><p>字符是否包含子串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.include?&quot;lo&quot;</span><br><span class="line">#=&gt; true</span><br><span class="line"></span><br><span class="line">&quot;hello&quot;.include?&quot;loc&quot;</span><br><span class="line">#=&gt; false</span><br></pre></td></tr></table></figure></li><li><p>字符串插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;1234&quot;.insert(0, &quot;G&quot;)</span><br><span class="line">#=&gt; &quot;G1234&quot;</span><br><span class="line">&quot;1234&quot;.insert(3, &quot;G&quot;)</span><br><span class="line">#=&gt; &quot;123G4&quot;</span><br><span class="line">&quot;1234&quot;.insert(-1, &quot;G&quot;)</span><br><span class="line">#=&gt; &quot;1234G&quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串分割</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 默认分割符为空格</span><br><span class="line">&quot;a b c d&quot;.split</span><br><span class="line">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">?&gt; &quot;Grac&quot;.split(//)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;a&quot;, &quot;c&quot;]</span><br><span class="line">&gt;&gt; &quot;Grac&quot;.split(//, 3)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;ac&quot;]</span><br><span class="line">&gt;&gt; &quot;G,r,a,c&quot;.split(&quot;,&quot;)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;a&quot;, &quot;c&quot;]</span><br><span class="line">&gt;&gt; &quot;G,r,a,c,&quot;.split(&quot;,&quot;)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;a&quot;, &quot;c&quot;]</span><br><span class="line">&gt;&gt; &quot;G,r,a,c,,&quot;.split(&quot;,&quot;)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;a&quot;, &quot;c&quot;]</span><br><span class="line">&gt;&gt; &quot;G,r,a,c,,&quot;.split(%r&#123;,\s*&#125;)</span><br><span class="line">=&gt; [&quot;G&quot;, &quot;r&quot;, &quot;a&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></figure></li><li><p>字符串替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac Kanil&quot;.gsub(/rac/, &quot;###&quot;)</span><br><span class="line">=&gt; &quot;G### Kanil&quot;</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot;.sub(/.a/, &quot;##&quot;)</span><br><span class="line">=&gt; &quot;G##c Kanil&quot;</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot;.gsub(/.a/, &quot;##&quot;)</span><br><span class="line">=&gt; &quot;G##c ##nil&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt; s = &quot;Grac&quot;</span><br><span class="line">=&gt; &quot;Grac&quot;</span><br><span class="line">&gt;&gt; s.replace &quot;Kanil&quot;</span><br><span class="line">=&gt; &quot;Kanil&quot;</span><br><span class="line">&gt;&gt; s</span><br><span class="line">=&gt; &quot;Kanil&quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac&quot;.delete &quot;r&quot;</span><br><span class="line">=&gt; &quot;Gac&quot;</span><br><span class="line">&gt;&gt; &quot;Grac&quot;.delete &quot;rb-d&quot;</span><br><span class="line">=&gt; &quot;Ga&quot;</span><br></pre></td></tr></table></figure></li><li><p>除去字符串两端空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?&gt; s = &quot; Grac &quot;</span><br><span class="line">=&gt; &quot; Grac &quot;</span><br><span class="line">&gt;&gt; s.lstrip</span><br><span class="line">=&gt; &quot;Grac &quot;</span><br><span class="line">&gt;&gt; s.rstrip</span><br><span class="line">=&gt; &quot; Grac&quot;</span><br><span class="line">&gt;&gt; s.strip</span><br><span class="line">=&gt; &quot;Grac&quot;</span><br><span class="line">&gt;&gt; s</span><br><span class="line">=&gt; &quot; Grac &quot;</span><br></pre></td></tr></table></figure></li><li><p>字符串转数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; &quot;12345&quot;.to_i</span><br><span class="line">=&gt; 12345</span><br><span class="line">?&gt; &quot;1234ssa&quot;.to_i</span><br><span class="line">=&gt; 1234</span><br></pre></td></tr></table></figure></li><li><p>匹配子串的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?&gt; &quot;Grac Kanil&quot; =~ /an/</span><br><span class="line">=&gt; 6</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /[a]/</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /[a]+/</span><br><span class="line">=&gt; 2</span><br></pre></td></tr></table></figure></li><li><p>match 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; puts &quot;matched&quot; if &quot;Grac Kanil&quot;.match(/[ai]/)</span><br><span class="line">matched</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure></li><li><p>获取字符串方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.methods</span><br><span class="line">#=&gt; [:try_convert, :allocate, :new, :superclass, :freeze, :===, :==, :&lt;=&gt;, :&lt;, :&lt;=, :&gt;, :&gt;=, :to_s, :inspect, :included_modules, :include?, :name, :ancestors, :instance_methods, :public_instance_methods, :protected_instance_methods, :private_instance_methods, :constants, :const_get, :const_set, :const_defined?, :const_missing, :class_variables, :remove_class_variable, :class_variable_get, :class_variable_set, :class_variable_defined?, :public_constant, :private_constant, :singleton_class?, :include, :prepend, :module_exec, :class_exec, :module_eval, :class_eval, :method_defined?, :public_method_defined?, :private_method_defined?, :protected_method_defined?, :public_class_method, :private_class_method, :autoload, :autoload?, :instance_method, :public_instance_method, :nil?, :=~, :!~, :eql?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :frozen?, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :extend, :display, :method, :public_method, :singleton_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]</span><br></pre></td></tr></table></figure></li></ul><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 处理字符串去重</span><br><span class="line">str = &quot;AAA;BBBB;AAA;CC;AAA;CCC;BBBB&quot;</span><br><span class="line">str.split(&quot;;&quot;).uniq.join(&quot;;&quot;)</span><br><span class="line"># &quot;AAA;BBBB;CC;CCC&quot;</span><br></pre></td></tr></table></figure><blockquote><p>持续整理比较不错的🌰</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;Ruby 字符串类型为 String&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认使用 Unicode 字符集，可以直接转码，操作 
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - 浅谈和配置 Ruby</title>
    <link href="http://grackanil.top/2019/05/01/ruby-tutorial-environment/"/>
    <id>http://grackanil.top/2019/05/01/ruby-tutorial-environment/</id>
    <published>2019-05-01T05:24:47.917Z</published>
    <updated>2019-05-01T05:24:47.918Z</updated>
    
    <content type="html"><![CDATA[<p>Ruby —— 有趣的哲学。</p><blockquote><p>What,Why,Where,How? 你或许会问这些问题，接下来，浅谈些许拙见。</p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>大学时，在一个分享会上，听一个科大的准研究生说，“如何理解计算机基础？首先从思维方式上就要转变，站在计算机的角度去思考问题。”似乎也不无道理。我想，工程师大多也都是这个思维，这样机器就能运行的更快，运行效率更高…</p><p>然而，松本行弘先生(Matz)设计 Ruby 语言第一要义，就是 <code>减少编程时候的不必要的琐碎时间，令编写程序的人高兴。</code> </p><p>Matz 认为 Ruby &gt; (Smalltalk + Perl) / 2，表示Ruby是一个语法像 Smalltalk 一样完全面向对象、脚本运行、又有 Perl 强大的文字处理功能的编程语言。说到 Smalltalk ，不得不提一下 Objective-C， 它最大的特色就是承自 Smalltalk 的消息传递模型（message passing），该机制与今日 C++ 式之主流风格差异甚大。所以也提高了我探寻的兴趣 ；）</p><h2 id="0x01-Ruby-是什么"><a href="#0x01-Ruby-是什么" class="headerlink" title="0x01 Ruby 是什么"></a>0x01 Ruby 是什么</h2><p>Ruby 是一种面向对象、命令式、函数式、动态的通用编程语言。</p><p>Ruby has been designed on the Principle of Least Surprise - Matz says “I wanted to minimize my frustration during programming, so I want to minimize my effort in programming. That was my primary goal in designing Ruby. I want to have fun in programming myself. After releasing Ruby and many people around the world got to know Ruby, they said they feel the way I feel. They came up with the phrase the principle of least surprise.”</p><p>2001 年，Oreilly 对 Matz 的一个关于 Ruby 历史的<a href="https://www.oreilly.com/ideas" target="_blank" rel="noopener">采访</a>. Matz 的 “<a href="https://www.artima.com/intv/ruby.html" target="_blank" rel="noopener">The Philosophy of Ruby</a>“ 也值得学习。</p><h2 id="0x02-为什么要学习-Ruby"><a href="#0x02-为什么要学习-Ruby" class="headerlink" title="0x02 为什么要学习 Ruby"></a>0x02 为什么要学习 Ruby</h2><p><code>有趣</code>。这是一个好的问题，但这也是一个大家都知道答案的问题。一千个读者就有一千个哈姆雷特，我想也类似于这个问题。我简单说一下我的原因，有些人会说，语言只是工具而已，不用学习那么多。希望大家辩证的思考这个观点，每一门语言，每一个设计，都有自己的原则，都有自己的思维方式，自己的哲学存在。学习锻炼自己，发人深省。每一个 iOS 开发者，对 Smalltalk 或多或少会有些情愫，Ruby 中也能看到它的影子，不免有些共鸣。</p><h2 id="0x03-如何学习-Ruby"><a href="#0x03-如何学习-Ruby" class="headerlink" title="0x03 如何学习 Ruby"></a>0x03 如何学习 Ruby</h2><h3 id="一、下载-Ruby"><a href="#一、下载-Ruby" class="headerlink" title="一、下载 Ruby"></a>一、下载 Ruby</h3><p>for Windows，个人多一句，建议不使用 Windows 环境学习 Ruby，有两个原因，第一，Ruby 对 Unix 环境的需求非常高；第二，Ruby 在 Windows 环境下面执行效率低。或多或少会有些弯路。</p><ul><li>下载 <a href="https://rubyinstaller.org/" target="_blank" rel="noopener">Ruby for Windows</a></li><li>双击同意协议</li><li>配置环境变量</li></ul><p>for UNIX-like，首先不建议使用系统预装的，可能比较过时了，另外，推荐使用 <code>rbenv</code>、 <code>RVM</code> 或者 <code>chruby</code> 管理 Ruby 环境。</p><ul><li>先安装 <a href="http://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> 开发工具，它将帮你安装好 Unix 环境需要的开发包</li><li>然后安装 <a href="http://brew.sh" target="_blank" rel="noopener">Homebrew</a></li><li><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li><li>如果需要安装 Rails，安装 <code>brew install libxml2 libxslt libiconv</code> 必须的依赖第三库</li><li><p>安装 RVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">$ -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">如果失败，尝试</span><br><span class="line">$ curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable</span><br><span class="line">$ source ~/.rvm/scripts/rvm</span><br><span class="line">$ echo &quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db</span><br><span class="line">$ rvm -v</span><br></pre></td></tr></table></figure></li><li><p>RVM 安装 Ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ rvm requirements</span><br><span class="line">$ rvm install 2.4.0</span><br><span class="line">$ rvm use 2.4.0 --default</span><br><span class="line">$ ruby -v</span><br><span class="line">$ gem -v</span><br><span class="line">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure></li><li><p>安装 Bundler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install bundler</span><br></pre></td></tr></table></figure></li><li><p>安装 Rails</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem install rails</span><br><span class="line">$ rails -v</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、下载一个编辑器"><a href="#二、下载一个编辑器" class="headerlink" title="二、下载一个编辑器"></a>二、下载一个编辑器</h3><ul><li>Visual Studio Code</li><li>Atom</li><li>Sublime Text</li><li>Vim 或 Emacs</li></ul><h2 id="0x04-在哪儿学习-Ruby"><a href="#0x04-在哪儿学习-Ruby" class="headerlink" title="0x04 在哪儿学习 Ruby"></a>0x04 在哪儿学习 Ruby</h2><ul><li><a href="http://rubylearning.com/satishtalim/tutorial.html" target="_blank" rel="noopener">rubylearning</a></li><li><a href="https://www.ruby-lang.org/zh_cn/" target="_blank" rel="noopener">ruby lang</a></li><li><a href="https://ruby-china.org/" target="_blank" rel="noopener">ruby china 社区</a></li><li><a href="http://phrogz.net/programmingruby/" target="_blank" rel="noopener">Programming Ruby</a></li><li>持续学习更新收集中…（PS:此处支持布道者推荐）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ruby —— 有趣的哲学。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What,Why,Where,How? 你或许会问这些问题，接下来，浅谈些许拙见。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - 常谈正则表达式</title>
    <link href="http://grackanil.top/2019/05/01/ruby-regular-expression/"/>
    <id>http://grackanil.top/2019/05/01/ruby-regular-expression/</id>
    <published>2019-05-01T05:24:47.916Z</published>
    <updated>2019-05-01T05:24:47.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Ruby</code> 对正则表达式支持比较好，简单整理一下。开门推荐三链接。<br><a href="http://www.rubular.com/" target="_blank" rel="noopener">Rubular</a>:在线 Ruby 正则表达式精品编辑器，支持多版本 Ruby<br><a href="http://ruby-doc.com/docs/ProgrammingRuby/#UJ" target="_blank" rel="noopener">Ruby Doc</a> Ruby (英文)文档<br><a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">30 分钟入门正则表达式</a>: 还不错的正则整理文档</p><h2 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a>CheatSheet</h2><p><img src="http://oxwk2uou0.bkt.clouddn.com/RegexRuby.jpeg" alt="Ruby Regex CheatSheet From Rubular"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Ruby 中正则组成比较简单，模式如下，表达式返回 <code>RegExp</code> 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/optional_modifier</span><br></pre></td></tr></table></figure></p><p>万物皆对象，可以验证下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?&gt; puts /GracKanil/.class</span><br><span class="line">Regexp</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure></p><p>既然是对象，可以创建 RegExp 对象，用于正则匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?&gt; r = Regexp.new &apos;Grac&apos;</span><br><span class="line">=&gt; /Grac/</span><br><span class="line">&gt;&gt; p &quot;Grac Kanil&quot;.match r</span><br><span class="line">#&lt;MatchData &quot;Grac&quot;&gt;</span><br><span class="line">=&gt; #&lt;MatchData &quot;Grac&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="一般规则"><a href="#一般规则" class="headerlink" title="一般规则"></a>一般规则</h2><ul><li><p>匹配字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/G/</span><br></pre></td></tr></table></figure></li><li><p>匹配特殊符号，包括 <code>^</code>, <code>$</code>, <code>?</code>, <code>.</code>, <code>/</code>, <code>\</code>, <code>[</code>, <code>]</code>, <code>{</code>, <code>}</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>*</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\?/</span><br></pre></td></tr></table></figure></li><li><p><code>.</code>匹配任意字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/.G/ # 匹配 KG, kG ...</span><br></pre></td></tr></table></figure></li><li><p>匹配范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/[ab]c/ # 匹配 ac 或者 bc</span><br><span class="line">/[a-z]/</span><br><span class="line">/[a-z0-9A-Z]/</span><br></pre></td></tr></table></figure></li><li><p>匹配不在该范围的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^a-z]/ # 不含小写字母的字符串</span><br></pre></td></tr></table></figure></li><li><p>任意数字，字母，空白符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/[\d]/ # 任意数字</span><br><span class="line">/[\w]/ # 任意字母</span><br><span class="line">/[\s]/ # 任意空字符，空格、TAB、换行</span><br><span class="line"></span><br><span class="line">/[\D]/，/[\W]/，/[\S]/ 均为上述相反情况</span><br></pre></td></tr></table></figure></li></ul><h2 id="高级规则"><a href="#高级规则" class="headerlink" title="高级规则"></a>高级规则</h2><ul><li>重复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? 重复零次或一次</span><br><span class="line">* 重复零次或更多次</span><br><span class="line">+ 重复一次或更多次</span><br><span class="line">&#123;n&#125; 重复n次 # /d&#123;3&#125;/ 匹配 3 个数字</span><br><span class="line">&#123;n,&#125; 重复n次或更多次 # /d&#123;3,&#125;/ 匹配 3 个数字以上</span><br><span class="line">&#123;n,m&#125; 重复n到m次 # /d&#123;1,10&#125;/ 匹配 1-10 个数字</span><br></pre></td></tr></table></figure></li></ul><h2 id="匹配操作符"><a href="#匹配操作符" class="headerlink" title="匹配操作符"></a>匹配操作符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">检查字符串中是否包含可以匹配的正则表达式，如果有，返回第一个匹配的字符的索引位置，如果没有，返回 `nil`。</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /an/</span><br><span class="line">=&gt; 6</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /at/</span><br><span class="line">=&gt; nil</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /an/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">大小写字母和数字范围模式匹配</span><br><span class="line">?&gt; &quot;Grac Kanil&quot; =~ /[aeiou]/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;yes&quot;</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /[mpt]/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;no&quot;</span><br><span class="line"></span><br><span class="line">`[]`表示同时搜索的单个字符列表</span><br><span class="line">?&gt; &quot;Grac Kanil&quot; =~ /[a-z]/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;yes&quot;</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /[0-9]/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;no&quot;</span><br><span class="line">&gt;&gt; &quot;Grac Kanil&quot; =~ /[A-Z]/ ? &quot;yes&quot; : &quot;no&quot;</span><br><span class="line">=&gt; &quot;yes&quot;</span><br></pre></td></tr></table></figure><h2 id="regexp-match-str-匹配"><a href="#regexp-match-str-匹配" class="headerlink" title="regexp#match(str) 匹配"></a>regexp#match(str) 匹配</h2><p>返回 <code>MatchData</code> ，一个数组，从 0 开始，还有 <code>match.pre_match</code> 返回匹配前内容，<code>match.post_match</code> 返回匹配后内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; c = /cat/.match(&quot;bigcatcomes&quot;) # 等价于 c = /cat/.match %r&#123;bigcatcomes&#125;</span><br><span class="line">=&gt; #&lt;MatchData &quot;cat&quot;&gt;</span><br><span class="line">&gt;&gt; c.pre_match</span><br><span class="line">=&gt; &quot;big&quot;</span><br><span class="line">&gt;&gt; c.post_match</span><br><span class="line">=&gt; &quot;comes&quot;</span><br><span class="line">&gt;&gt; c[0]</span><br><span class="line">=&gt; &quot;cat&quot;</span><br></pre></td></tr></table></figure></p><p>与此同时，可以使用 <code>str.match regex</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &quot;Grac Kanil&quot;.match /.rac/</span><br><span class="line">=&gt; #&lt;MatchData &quot;Grac&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="匹配所有"><a href="#匹配所有" class="headerlink" title="匹配所有"></a>匹配所有</h2><p><code>regexp#match()</code> 只能匹配一次，如果想匹配所有要用 <code>regexp#scan()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; &quot;abcabcabz&quot;.scan(%r&#123;abc&#125;).each &#123;|item| puts item&#125;</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">=&gt; [&quot;abc&quot;, &quot;abc&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h2><p>Ruby 分组匹配和其他语言分组匹配相似，需要分组的部分加上括号</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p>$` ，$&amp; ，$’ 这三个变量分别表示【上次匹配之前的字符串 等同于 pre_match】、【匹配的字符串】、【上次匹配结果之后的字符串 等同于  post_match】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; puts &quot;Grac Kanil is a name.&quot; =~ /Kanil/</span><br><span class="line">5</span><br><span class="line">=&gt; nil</span><br><span class="line">&gt;&gt; p $`</span><br><span class="line">&quot;Grac &quot;</span><br><span class="line">=&gt; &quot;Grac &quot;</span><br><span class="line">&gt;&gt; p $&amp;</span><br><span class="line">&quot;Kanil&quot;</span><br><span class="line">=&gt; &quot;Kanil&quot;</span><br><span class="line">&gt;&gt; p $&apos;</span><br><span class="line">&quot; is a name.&quot;</span><br><span class="line">=&gt; &quot; is a name.&quot;</span><br></pre></td></tr></table></figure></p><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>很多时候需要替换字符串中所有的子串，Ruby 使用 <code>sub()</code> 和 <code>gsub()</code> 可以简单实现。</p><ul><li><code>sub</code> 只替换第一次匹配</li><li><code>gsub（g:global）</code> 会替换所有的匹配，</li><li>没有匹配到返回原字符串的 <code>copy</code> 字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;ABDADA&quot;</span><br><span class="line">new_str = str.sub(/A/, &quot;*&quot;) #返回&quot;*BDADA&quot;</span><br><span class="line">new_str2 = str.gsub(/A/, &quot;*&quot;)#返回&quot;*BD*D*&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修饰语"><a href="#修饰语" class="headerlink" title="修饰语"></a>修饰语</h2><p>也正是 <code>/pattern/optional_modifier</code> 中的 <code>optional_modifier</code></p><ul><li>i 忽略大小写，/abc/i 可以匹配 ABC，abc，Abc 等。</li><li>m 使得正则表达式可以和任何字符匹配，包括换行符，通常情况下圆点通配符不匹配换行符。</li><li>x 忽略空格，允许在整个表达式中放入空白符和注释。<br>…</li></ul><h2 id="锚"><a href="#锚" class="headerlink" title="锚"></a>锚</h2><ul><li><p><code>^</code> 字符匹配了字符串或行的开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^me/  # 匹配以 me 开头的字符串</span><br></pre></td></tr></table></figure></li><li><p><code>$</code> 字符匹配了字符串或行的结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/me$/  # 匹配以 me 结尾的字符串</span><br></pre></td></tr></table></figure></li><li><p><code>\A</code>字符匹配了字符串的开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\ARuby/ # 匹配以 &quot;Ruby&quot; 开头的字符串</span><br></pre></td></tr></table></figure></li><li><p><code>\Z</code>字符匹配了字符串的结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Ruby\Z/ # 匹配以 &quot;Ruby&quot; 结尾的字符串</span><br></pre></td></tr></table></figure></li><li><p><code>\b</code> 字符匹配词的边界</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\bRuby\b/ # 匹配单词边界的 &quot;Ruby&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>\B</code> 字符匹配非词的边界</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\brub\B/ # 匹配 &quot;rube&quot; 和 &quot;ruby&quot; 中的 &quot;rub&quot;，但不匹配单独的 &quot;rub&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="贪婪匹配和不贪婪匹配"><a href="#贪婪匹配和不贪婪匹配" class="headerlink" title="贪婪匹配和不贪婪匹配"></a>贪婪匹配和不贪婪匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/&lt;.*&gt;/  # 贪婪重复：匹配 &quot;&lt;ruby&gt;perl&gt;&quot;</span><br><span class="line">/&lt;.*?&gt;/ # 非贪婪重复：匹配 &quot;&lt;ruby&gt;perl&gt;&quot; 中的 &quot;&lt;ruby&gt;&quot;</span><br></pre></td></tr></table></figure><h2 id="可能帮到您的链接"><a href="#可能帮到您的链接" class="headerlink" title="可能帮到您的链接"></a>可能帮到您的链接</h2><ul><li><a href="https://www.cnblogs.com/cnblogsfans/archive/2009/02/02/1382745.html" target="_blank" rel="noopener">一步一步学 Ruby</a></li><li><a href="http://www.rubular.com/" target="_blank" rel="noopener">rubular</a></li><li><a href="https://ruby-china.org/topics/2427" target="_blank" rel="noopener">ruby china 正则</a></li><li><a href="https://ruby-china.org/topics/32821" target="_blank" rel="noopener">ruby china 简单记录</a></li><li><a href="http://rubyer.me/blog/357/" target="_blank" rel="noopener">ruby 迷</a></li><li><a href="https://github.com/wusuopu/Ruby-tutorial/blob/master/14.regex.md" target="_blank" rel="noopener">ruby github 笔记</a></li><li><a href="http://zetcode.com/lang/rubytutorial/regex/" target="_blank" rel="noopener">Ruby Regex Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Ruby&lt;/code&gt; 对正则表达式支持比较好，简单整理一下。开门推荐三链接。&lt;br&gt;&lt;a href=&quot;http://www.r
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - 浅尝 Ruby 特性</title>
    <link href="http://grackanil.top/2019/05/01/ruby-feature/"/>
    <id>http://grackanil.top/2019/05/01/ruby-feature/</id>
    <published>2019-05-01T05:24:47.915Z</published>
    <updated>2019-05-01T05:24:47.915Z</updated>
    
    <content type="html"><![CDATA[<p>经过粗略的看 Ruby 相关资源，看到了很多相似或相异却熟悉的点滴，还谈不上深刻体验，只能算记录。仍需用心探索，决定高层建筑需要夯实基础，理解原理，体会设计。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分享两个有趣的链接<br><a href="https://ruby.github.io/TryRuby/" target="_blank" rel="noopener">TryRuby</a>：顾名思义，试试先。<br><a href="http://saito.im/slide/ruby-new.html" target="_blank" rel="noopener">Ruby.new</a>：好看的皮囊千篇一律，有趣的灵魂万里挑一。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>先不厌其烦的记录下基础知识，闲话少叙。谈及迭代器（iteration），少不了谈到相似结构——循环（looping）。循环简要的说，是重复执行一段程序直到一个明确条件。迭代器是操作一个集合对象，如 Array 等，让集合每一个元素执行。<br>看看执行一个简单的迭代器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7.times do</span><br><span class="line">  puts &quot;Hello Iteration.&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>输入指定条件，才会停止的循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input = &quot;&quot;</span><br><span class="line">while input != &quot;quit&quot;</span><br><span class="line">  puts &quot;ha,#&#123;input&#125;&quot;</span><br><span class="line">  input = gets.chomp</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>一个使用 <code>#each</code> 迭代器的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">colors = [&quot;Yellow&quot;, &quot;Red&quot;, &quot;Black&quot;]</span><br><span class="line">colors.each do |color| #block 开始</span><br><span class="line">  puts &quot;#&#123;color&#125;&quot; #block体</span><br><span class="line">end #block 结束</span><br></pre></td></tr></table></figure></p><p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?&gt; colors = [&quot;Yellow&quot;, &quot;Red&quot;, &quot;Black&quot;]</span><br><span class="line">=&gt; [&quot;Yellow&quot;, &quot;Red&quot;, &quot;Black&quot;]</span><br><span class="line">&gt;&gt; colors.each do |color|</span><br><span class="line">?&gt;   puts &quot;#&#123;color&#125;&quot;</span><br><span class="line">&gt;&gt; end</span><br><span class="line">Yellow</span><br><span class="line">Red</span><br><span class="line">Black</span><br><span class="line">=&gt; [&quot;Yellow&quot;, &quot;Red&quot;, &quot;Black&quot;]</span><br></pre></td></tr></table></figure></p><p>说到 <code>iterator</code> ，肯定和 <code>block</code> 强相关， 让我们走进 <code>block</code> 看看一些概念。</p><p>什么是<code>块（block）</code>？<br>一块在括号<code>{}</code>内部代码叫块（block），或者<code>do</code> / <code>end</code> 之间的代码块，块（block）使 <code>ruby</code> 更加特殊、强大、受欢迎。</p><p>什么是 <code>| |</code>?<br>被称为管道，调用迭代器 #each 时，管道内的变量充当传递给块的参数，传递到块中的每个元素将等于管道内的变量名称。为集合中的每个元素调用或运行块中的代码一次。<code>#each</code>方法每次取集合中的一个元素，并将其传递至块中，每个元素赋值给管道中的变量。</p><p><code>{ }</code> 语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colors = [&quot;Yellow&quot;, &quot;Red&quot;, &quot;Black&quot;]</span><br><span class="line">colors.each &#123;|color| puts &quot;#&#123;color&#125;&quot; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="一切表达方法皆有值"><a href="#一切表达方法皆有值" class="headerlink" title="一切表达方法皆有值"></a>一切表达方法皆有值</h2><p>任何表达式都有返回值，即使是<code>nil</code>，如下代码也有（有没有觉得不可思议）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = 10</span><br><span class="line">y = 11</span><br><span class="line">z = if x &lt; y</span><br><span class="line">      true</span><br><span class="line">    else</span><br><span class="line">      false</span><br><span class="line">    end</span><br><span class="line">z # =&gt; true</span><br></pre></td></tr></table></figure></p><h2 id="符号不是轻量的字符串"><a href="#符号不是轻量的字符串" class="headerlink" title="符号不是轻量的字符串"></a>符号不是轻量的字符串</h2><p>符号最好的描述是身份证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; :grackanil.object_id</span><br><span class="line">=&gt; 1145628</span><br><span class="line">&gt;&gt; :grackanil.object_id</span><br><span class="line">=&gt; 1145628</span><br><span class="line"></span><br><span class="line">?&gt; &quot;grackanil&quot;.object_id</span><br><span class="line">=&gt; 70162817382840</span><br><span class="line">&gt;&gt; &quot;grackanil&quot;.object_id</span><br><span class="line">=&gt; 70162817360420</span><br></pre></td></tr></table></figure></p><p>以上代码说明什么？说明当符号在使用过一次后，任何相同字符的符号都会在内存中指向同一个对象地址，也即是 object_id 相同。字符串就不同，每次都会分配新的空间，即 object_id 不同。</p><h2 id="一切皆是对象"><a href="#一切皆是对象" class="headerlink" title="一切皆是对象"></a>一切皆是对象</h2><p>丝毫不夸张，整型都是对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?&gt; 1.class</span><br><span class="line">=&gt; Fixnum</span><br></pre></td></tr></table></figure></p><h2 id="可以改变的常量"><a href="#可以改变的常量" class="headerlink" title="可以改变的常量"></a>可以改变的常量</h2><p>只会有警告，但不会终止执行，但还是不建议修改。</p><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><p>只是约定。</p><ul><li>局部变量以英文字母或者 _ 开头。</li><li>全局变量以 $ 开头。</li><li>实例变量以 @ 开头。</li><li>类变量以 @@ 开头</li></ul><h2 id="关键值参数"><a href="#关键值参数" class="headerlink" title="关键值参数"></a>关键值参数</h2><p>从 Ruby 2.0 开始就有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def deliver(from: &quot;A&quot;, to: nil, via: &quot;mail&quot;)</span><br><span class="line">  &quot;Sending from #&#123;from&#125; to #&#123;to&#125; via #&#123;via&#125;.&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">deliver(to: &quot;B&quot;)</span><br><span class="line"># =&gt; &quot;Sending from A to B via mail.&quot;</span><br><span class="line">deliver(via: &quot;Pony Express&quot;, from: &quot;B&quot;, to: &quot;A&quot;)</span><br><span class="line"># =&gt; &quot;Sending from B to A via Pony Express.&quot;</span><br></pre></td></tr></table></figure></p><h2 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h2><p>Ruby 把任何不是 nil 和 false 的值当作真值。和其他语言不同，可以说差异很大，其他语言，如 Python、C 等，都是会认为 0 和一些其他的值， 比如空的列表，会被当作假值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Ruby 中</span><br><span class="line">if 0</span><br><span class="line">  puts &quot;0 为真&quot;</span><br><span class="line">else</span><br><span class="line">  puts &quot;0 为假&quot;</span><br><span class="line">end</span><br><span class="line"># puts &quot;0 为真&quot;</span><br></pre></td></tr></table></figure></p><h2 id="权限控制声明"><a href="#权限控制声明" class="headerlink" title="权限控制声明"></a>权限控制声明</h2><p>权限声明会一直应用到类声明底部或者直到另外一个权限声明开始起作用。</p><ul><li>public 是公开的。</li><li>private 表示只有非明确指定接收者允许调用。私有方法调用只允许 self 为接收者。</li><li>protected 可以被类及子类的实例调用，同一个类的其他实例也可以调用。<br>另外，<code>public</code>、<code>private</code> 和 <code>protected</code> 都是方法，可以传参，如果传递一个符号作为参数，那符号所代表的函数就是指定的权限。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?&gt; method(:public)</span><br><span class="line">=&gt; #&lt;Method: main.public&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类是开放的"><a href="#类是开放的" class="headerlink" title="类是开放的"></a>类是开放的</h2><p>可以打开任何类，对它增加和修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class Fixnum</span><br><span class="line">  def month</span><br><span class="line">    self * 30</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>1.month</p><h2 id="以-？和-！结尾的方法"><a href="#以-？和-！结尾的方法" class="headerlink" title="以 ？和 ！结尾的方法"></a>以 ？和 ！结尾的方法</h2><p>首先，允许 ？和 ! 结尾。以问号结尾的方法表示返回布尔值，以感叹号结尾表示潜在“危险”方法，会修改<code>self</code>或参数。</p><h2 id="Missing-方法"><a href="#Missing-方法" class="headerlink" title="Missing 方法"></a>Missing 方法</h2><p>会将不存在的方法名，作为参数传递给 <code>method_missing</code>，<code>method_missing</code> 默认会抛出一个 NameError 异常。根据需要可以，可以覆盖该方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def method_missing(id, *arguments)</span><br><span class="line">  puts &quot;调用了不存在的方法：#&#123;id&#125;。它的参数：#&#123;arguments.join(&quot;, &quot;)&#125;&quot;</span><br><span class="line">end</span><br><span class="line">1.sssss :a 2222</span><br><span class="line"># 调用了不存在的方法：sssss。它的参数：a, 2222</span><br></pre></td></tr></table></figure></p><h2 id="操作符是语法糖"><a href="#操作符是语法糖" class="headerlink" title="操作符是语法糖"></a>操作符是语法糖</h2><p>大部分操作符仅仅是方法调用的语法糖，你可以覆盖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">=&gt; #&lt;Method: main.public&gt;</span><br><span class="line">&gt;&gt; class Fixnum</span><br><span class="line">&gt;&gt;   def +(other)</span><br><span class="line">&gt;&gt;     self - other</span><br><span class="line">&gt;&gt;   end</span><br><span class="line">&gt;&gt; end</span><br><span class="line">=&gt; :+</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; 1 + 1</span><br><span class="line">=&gt; 0</span><br></pre></td></tr></table></figure></p><p>当然，也有一些操作符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=, .., ..., not, &amp;&amp;, and, ||, or, ::, +=, *=</span><br></pre></td></tr></table></figure></p><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>方法调用实际是消息传递，不是函数调用。将一条消息传递给另一个对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过粗略的看 Ruby 相关资源，看到了很多相似或相异却熟悉的点滴，还谈不上深刻体验，只能算记录。仍需用心探索，决定高层建筑需要夯实基础，理解原理，体会设计。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - 纵览优雅的 Ruby</title>
    <link href="http://grackanil.top/2019/05/01/ruby-glance/"/>
    <id>http://grackanil.top/2019/05/01/ruby-glance/</id>
    <published>2019-05-01T05:24:47.915Z</published>
    <updated>2019-05-01T05:24:47.916Z</updated>
    
    <content type="html"><![CDATA[<p>“Ruby is simple in appearance, but is very complex inside, just like our human body.” — Matz, creator of the Ruby programming language</p><blockquote><p>一个读写都让你觉得优雅的语言。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先纵览一下整体 Ruby 的语法，粗略的读一下在线教程 <a href="https://www.kancloud.cn/imxieke/ruby-base" target="_blank" rel="noopener">《ruby基础教程（中文第四版）》</a>，如果连接失效，可以到 <code>链接: https://pan.baidu.com/s/1TUeRBYz0e7RqmauTftqXhA 密码: 2qpk</code> 下载 epub(注：为了分享学习使用，若侵即删)</p><h2 id="交互式-ruby-界面"><a href="#交互式-ruby-界面" class="headerlink" title="交互式 ruby 界面"></a>交互式 ruby 界面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &gt; ruby -E UTF-8 脚本文件名 ← 脚本执行</span><br><span class="line"># &gt; irb -E UTF-8 ← irb 启动</span><br><span class="line"># &gt; irb --simple-prompt 简化输出</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello, Ruby.\n&quot;)      #=&gt;Hello, Ruby.</span><br><span class="line">print(&apos;Hello, \nRuby\n!\n&apos;)  #=&gt;Hello, \nRuby\n!\n</span><br><span class="line">print(&quot;Hello, \nRuby\n!\n&quot;)  #=&gt;Hello, #换行# Ruby</span><br><span class="line">puts &quot;Hello, &quot;, &quot;Ruby&quot;       #=&gt;Hello, #换行# Ruby</span><br><span class="line">puts &quot;100&quot;  #=&gt; 100</span><br><span class="line">puts 100    #=&gt; 100</span><br><span class="line">p &quot;100&quot;     #=&gt; &quot;100&quot;</span><br><span class="line">p 100       #=&gt; 100</span><br><span class="line">puts &quot;Hello, \n\tRuby.&quot; #=&gt; 转义</span><br><span class="line">p &quot;Hello, \n\tRuby.&quot; #=&gt; 不转义</span><br><span class="line">print &quot;表面积=&quot;, (20 * 2), &quot;\n&quot;</span><br><span class="line">print &quot;表面积=#&#123;20 * 2&#125;\n&quot;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个单行注释。</span><br><span class="line"></span><br><span class="line">=begin</span><br><span class="line">我是多行注释</span><br><span class="line">哦</span><br><span class="line">=end</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义一个变量，存储 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one = 1</span><br></pre></td></tr></table></figure></p><p>除了定义 integer ，还可以定义 String，boolean，symbol，float 等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t_val = true</span><br><span class="line">f_val = false</span><br><span class="line"></span><br><span class="line">name = &quot;Grac Kanil&quot;</span><br><span class="line"></span><br><span class="line">symbol = :symbol</span><br><span class="line"></span><br><span class="line">price = 11.25</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 局部变量以英文字母或者 _ 开头。</span><br><span class="line"># 全局变量以 $ 开头。</span><br><span class="line"># 实例变量以 @ 开头。</span><br><span class="line"># 类变量以 @@ 开头</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 常量</span><br><span class="line">&gt; irb --simple-prompt</span><br><span class="line">&gt;&gt; TEST = 1</span><br><span class="line">=&gt; 1</span><br><span class="line">&gt;&gt; TEST = 2</span><br><span class="line">(irb):4: warning: already initialized constant TEST</span><br><span class="line">(irb):3: warning: previous definition of TEST was here</span><br><span class="line">=&gt; 2</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = 1, 2, 3</span><br><span class="line"></span><br><span class="line">a, b, c, d = 1, 2</span><br><span class="line">p [a, b, c]    #=&gt; [1, 2, nil]</span><br><span class="line"></span><br><span class="line">a, b, *c = 1, 2, 3, 4, 5</span><br><span class="line">p [a, b, c]    #=&gt; [1, 2, [3, 4, 5]]</span><br><span class="line">a, * b, c = 1, 2, 3, 4, 5</span><br><span class="line">p [a, b, c]    #-&gt; [1, [2, 3, 4], 5]</span><br><span class="line"></span><br><span class="line">a, b = 0, 1</span><br><span class="line">a, b = b, a    # 置换变量a、b 的值</span><br><span class="line">p [a, b]       #=&gt; [1, 0</span><br><span class="line"></span><br><span class="line">ary = [1, 2]</span><br><span class="line">a, b = ary</span><br><span class="line">p a        #=&gt; 1</span><br><span class="line">p b        #=&gt; 2</span><br><span class="line"></span><br><span class="line">ary = [1, [2, 3], 4]</span><br><span class="line">a, b, c = ary</span><br><span class="line">p a    #=&gt; 1</span><br><span class="line">p b    #=&gt; [2, 3]</span><br><span class="line">p c    #=&gt; 4</span><br><span class="line"></span><br><span class="line">ary = [1, [2, 3], 4]</span><br><span class="line">a, (b1, b2), c = ary    # 对与数组结构相对应的变量赋值</span><br><span class="line">p a    #=&gt; 1</span><br><span class="line">p b1   #=&gt; 2</span><br><span class="line">p b2   #=&gt; 3</span><br><span class="line">p c    #=&gt; 4</span><br></pre></td></tr></table></figure><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># Ruby 会认为 false 与 nil 代表假，除此以外的所有值都代表真</span><br><span class="line"># then 可以省略</span><br><span class="line">x = 2</span><br><span class="line">if x == 2 then</span><br><span class="line">    p &quot;x=2&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if true</span><br><span class="line">  puts &quot;Hello Ruby.&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 2 &gt; 1</span><br><span class="line">  puts &quot;bigger&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 1 &gt; 2</span><br><span class="line">  puts &quot;bigger&quot;</span><br><span class="line">else</span><br><span class="line">  puts &quot;smaller&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 1 &gt; 2</span><br><span class="line">  puts &quot;bigger&quot;</span><br><span class="line">elsif 2 &gt; 1</span><br><span class="line">  puts &quot;smaller&quot;</span><br><span class="line">else</span><br><span class="line">  puts &quot;equal&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 条件 then</span><br><span class="line">　处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 条件 1 then</span><br><span class="line">　处理 1</span><br><span class="line">elsif 条件 2 then</span><br><span class="line">　处理 2</span><br><span class="line">elsif 条件 3 then</span><br><span class="line">　处理 3</span><br><span class="line">else</span><br><span class="line">　处理 4</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">unless 条件 then</span><br><span class="line">　处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">unless 条件</span><br><span class="line">　处理 1</span><br><span class="line">else</span><br><span class="line">　处理 2</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if 条件</span><br><span class="line">　处理 2</span><br><span class="line">else</span><br><span class="line">　处理 1</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">case 比较对象</span><br><span class="line">when 值 1 then</span><br><span class="line">　处理 1</span><br><span class="line">when 值 2 then</span><br><span class="line">　处理 2</span><br><span class="line">when 值 3 then</span><br><span class="line">　处理 3</span><br><span class="line">else</span><br><span class="line">　处理 4</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def function?</span><br><span class="line">  true</span><br><span class="line">end</span><br><span class="line"># 方法名为 function?，问号表示返回 boolean 类型</span><br><span class="line">puts &quot;let’s go&quot; if function?</span><br></pre></td></tr></table></figure><h2 id="循环和迭代"><a href="#循环和迭代" class="headerlink" title="循环和迭代"></a>循环和迭代</h2><p>Ruby 中的迭代有许多种不同的形式，简单说一下 <code>while</code>，<code>for</code> 和 <code>each</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">循环次数.times do</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">循环次数.times &#123;</span><br><span class="line">　希望循环的处理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for 变量 in 开始时的数值..结束时的数值 do</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">for 变量 in 对象 do</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">while 条件 do</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">until 条件 do</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">对象.each do | 变量 |</span><br><span class="line">　希望循环的处理</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">对象.each &#123;| 变量 |</span><br><span class="line">　希望循环的处理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># do 也可以省略</span><br><span class="line">i = 1</span><br><span class="line">while i &lt; 10 do</span><br><span class="line">    p &quot;#&#123;i&#125;&quot;</span><br><span class="line">    i = i + 1</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">n = 1</span><br><span class="line">while n &lt;= 10</span><br><span class="line">  puts n</span><br><span class="line">  n += 1</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">for n in 1....10</span><br><span class="line">  puts n</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">[1,2,3,4,5,6].each do |x| </span><br><span class="line">  puts x</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>each 和 loop 又有些区别，each 迭代器仅仅保持变量在 block 中，而 loop 允许变量在 block 外，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">irb --simple-prompt 中测试</span><br><span class="line">?&gt; for num in 1...5</span><br><span class="line">&gt;&gt;   puts num</span><br><span class="line">&gt;&gt; end</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">=&gt; 1...5</span><br><span class="line">&gt;&gt; puts num</span><br><span class="line">4</span><br><span class="line">=&gt; nil</span><br><span class="line"></span><br><span class="line">然而</span><br><span class="line">&gt;&gt; [1,2,3,4,5].each do |n|</span><br><span class="line">?&gt;   puts n</span><br><span class="line">&gt;&gt; end</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">=&gt; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt; puts n</span><br><span class="line">NameError: undefined local variable or method `n&apos; for main:Object</span><br><span class="line">from (irb):17</span><br><span class="line">from /Users/gekang/.rvm/rubies/ruby-2.2.4/bin/irb:11:in `&lt;main&gt;&apos;</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>另外也有无限循环的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop do</span><br><span class="line">    print &quot;Ruby&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>array，众所周知，使用 index 可以操作 array，在 Ruby 中还有一些其他不同的操作方式，如<code>push</code> 和 <code>&lt;&lt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">?&gt; array = [1,2,3,4,5]</span><br><span class="line">=&gt; [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">?&gt; array = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; array.push(&quot;grac&quot;)</span><br><span class="line">=&gt; [&quot;grac&quot;]</span><br><span class="line">&gt;&gt; array.push(&quot;kanil&quot;)</span><br><span class="line">=&gt; [&quot;grac&quot;, &quot;kanil&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt;</span><br><span class="line">?&gt; print array[0]</span><br><span class="line">grac=&gt; nil</span><br><span class="line">&gt;&gt;</span><br><span class="line"></span><br><span class="line">?&gt; array = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; array &lt;&lt; &quot;Grac&quot;</span><br><span class="line">=&gt; [&quot;Grac&quot;]</span><br><span class="line">&gt;&gt; array &lt;&lt; &quot;Kanil&quot;</span><br><span class="line">=&gt; [&quot;Grac&quot;, &quot;Kanil&quot;]</span><br><span class="line"></span><br><span class="line">也可以使用点语法，酷不酷？</span><br><span class="line">?&gt; array.&lt;&lt;(&quot;Ruby is cool,huh?&quot;)</span><br><span class="line">=&gt; [&quot;Grac&quot;, &quot;Kanil&quot;, &quot;Ruby is cool,huh?&quot;]</span><br></pre></td></tr></table></figure></li><li><p>hash，key-value 集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?&gt; hash = &#123;</span><br><span class="line">?&gt; &quot;key1&quot; =&gt; &quot;value1&quot;,</span><br><span class="line">?&gt; &quot;key2&quot; =&gt; &quot;value2&quot;</span><br><span class="line">&gt;&gt; &#125;</span><br><span class="line">=&gt; &#123;&quot;key1&quot;=&gt;&quot;value1&quot;, &quot;key2&quot;=&gt;&quot;value2&quot;&#125;</span><br><span class="line"></span><br><span class="line">可以使用任意类型作为 value</span><br><span class="line">&gt;&gt; hash = &#123;</span><br><span class="line">?&gt;   &quot;name&quot; =&gt; &quot;grackanil&quot;,</span><br><span class="line">?&gt;   &quot;age&quot; =&gt; 20</span><br><span class="line">&gt;&gt; &#125;</span><br><span class="line">=&gt; &#123;&quot;name&quot;=&gt;&quot;grackanil&quot;, &quot;age&quot;=&gt;20&#125;</span><br><span class="line"></span><br><span class="line">hash[&quot;gender&quot;] = &quot;male&quot;</span><br></pre></td></tr></table></figure></li><li><p>迭代器在集合中的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?&gt; array.each do |name|</span><br><span class="line">?&gt;   puts name</span><br><span class="line">&gt;&gt; end</span><br><span class="line">grac</span><br><span class="line">kanil</span><br><span class="line">=&gt; [&quot;grac&quot;, &quot;kanil&quot;]</span><br><span class="line"></span><br><span class="line">?&gt; hash.each do |property, value|</span><br><span class="line">?&gt;   puts &quot;#&#123;property&#125;: #&#123;value&#125;&quot;</span><br><span class="line">&gt;&gt; end</span><br><span class="line">name: grackanil</span><br><span class="line">age: 20</span><br><span class="line">gender: male</span><br><span class="line">=&gt; &#123;&quot;name&quot;=&gt;&quot;grackanil&quot;, &quot;age&quot;=&gt;20, &quot;gender&quot;=&gt;&quot;male&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>面向对象语言，自然少不了<code>类</code>和<code>对象</code>的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Animal</span><br><span class="line">  def initialize(species,habit)</span><br><span class="line">    @species = species</span><br><span class="line">    @habit = habit</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">cat = Animal.new(&quot;feline&quot;,&quot;meow&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>attr_reader(自动生成getter)</li><li>attr_writer(自动生成setter)</li><li>attr_accessor(自动生成 getter 和 setter)</li></ul><p>提出 getter 和 setter 的概念，主要是体现一个<code>封装</code>的设计原则。</p><p>继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Cat &lt; Animal</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h2 id="模块（一个工具箱）"><a href="#模块（一个工具箱）" class="headerlink" title="模块（一个工具箱）"></a>模块（一个工具箱）</h2><p>包含一些常量和方法的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">?&gt; module Hi</span><br><span class="line">&gt;&gt;   def hello_world</span><br><span class="line">&gt;&gt;     puts &quot;Hello, world.&quot;</span><br><span class="line">&gt;&gt;   end</span><br><span class="line">&gt;&gt; end</span><br><span class="line">=&gt; :hello_world</span><br><span class="line"></span><br><span class="line">?&gt; class Test</span><br><span class="line">&gt;&gt;   include Hi</span><br><span class="line">&gt;&gt;   def initialize(user)</span><br><span class="line">&gt;&gt;     @user = user</span><br><span class="line">&gt;&gt;   end</span><br><span class="line">&gt;&gt; end</span><br><span class="line">=&gt; :initialize</span><br><span class="line">&gt;&gt; test = Test.new(&quot;grackanil&quot;)</span><br><span class="line">=&gt; #&lt;Test:0x007fa01d801af0 @user=&quot;grackanil&quot;&gt;</span><br><span class="line">&gt;&gt; test.hello_world</span><br><span class="line">Hello, world.</span><br><span class="line">=&gt; nil</span><br><span class="line"></span><br><span class="line">module Tools</span><br><span class="line">    def class_name</span><br><span class="line">        p self</span><br><span class="line">    end</span><br><span class="line">    # module_function :class_name</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Son</span><br><span class="line">    include Tools</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">son = Son.new</span><br><span class="line">if Son.include?(Tools)</span><br><span class="line">    son.class_name</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">p Son.ancestors</span><br><span class="line">p Son.superclass</span><br></pre></td></tr></table></figure><p></p><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>可以说及其粗略地过了下 Ruby，但快乐之意，不会因为少而泛削减丝毫，大抵这就是魅力吧 :)</p><p>路漫漫其修远兮，吾将上下而求索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“Ruby is simple in appearance, but is very complex inside, just like our human body.” — Matz, creator of the Ruby programming language&lt;/p
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - Ruby 集合家族之数组（Array）</title>
    <link href="http://grackanil.top/2019/05/01/ruby-collection/"/>
    <id>http://grackanil.top/2019/05/01/ruby-collection/</id>
    <published>2019-05-01T05:24:47.914Z</published>
    <updated>2019-05-01T05:24:47.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习 Ruby 集合我觉得最好的方式是打开 <code>irb --simple-prompt</code> 命令，跟着例子学习。试着借助 Tab 补全加以思考🤔。</p></blockquote><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>和其他动态语言创建相似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.class</span><br><span class="line">=&gt; Array</span><br><span class="line">&gt;&gt; a.length</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt; a.size</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt; a[2]</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt; a &lt;&lt; 4</span><br><span class="line">=&gt; [1, 2, 3, 4]</span><br><span class="line">&gt;&gt; a</span><br><span class="line">=&gt; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><p>其中类型不必相同，可以同时是 String 、Number 等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, &quot;Grac Kanil&quot;, [2, 3]]</span><br><span class="line">=&gt; [1, &quot;Grac Kanil&quot;, [2, 3]]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a &lt;&lt; true</span><br><span class="line">=&gt; [1, &quot;Grac Kanil&quot;, [2, 3], true]</span><br><span class="line">&gt;&gt; a &lt;&lt; 3.14</span><br><span class="line">=&gt; [1, &quot;Grac Kanil&quot;, [2, 3], true, 3.14]</span><br></pre></td></tr></table></figure></p><p>一切皆对象，当然数组跑不了这个范畴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = Array.new([1, &quot;Hello&quot;, 2])</span><br><span class="line">=&gt; [1, &quot;Hello&quot;, 2]</span><br></pre></td></tr></table></figure></p><p>数组创建可以传参数，提前申请控件，但是数组是动态的，如果传入数组，会创建包含 nil 的数组。nil 也是一个对象，所以再追加，会在 nil 之后添加。当然可以快速传入默认值，占位数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = Array.new(3)</span><br><span class="line">=&gt; [nil, nil, nil]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a = Array.new(3, 1)</span><br><span class="line">=&gt; [1, 1, 1]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt;</span><br><span class="line">?&gt; a = Array.new(3)</span><br><span class="line">=&gt; [nil, nil, nil]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a &lt;&lt; 3</span><br><span class="line">=&gt; [nil, nil, nil, 3]</span><br><span class="line">?&gt; a.size</span><br><span class="line">=&gt; 4</span><br></pre></td></tr></table></figure></p><h2 id="切割字符串为数组"><a href="#切割字符串为数组" class="headerlink" title="切割字符串为数组"></a>切割字符串为数组</h2><ul><li><p><code>scan</code> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; s = &quot;This is a test string.&quot;</span><br><span class="line">=&gt; &quot;This is a test string.&quot;</span><br><span class="line">&gt;&gt; s.scan(/\w/).join(&quot;,&quot;)</span><br><span class="line">=&gt; &quot;T,h,i,s,i,s,a,t,e,s,t,s,t,r,i,n,g&quot;</span><br><span class="line">?&gt; s.scan(/\b\w*\b/)</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;&quot;, &quot;is&quot;, &quot;&quot;, &quot;a&quot;, &quot;&quot;, &quot;test&quot;, &quot;&quot;, &quot;string&quot;, &quot;&quot;]</span><br></pre></td></tr></table></figure></li><li><p><code>split</code> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; s = &quot;This is a test string.&quot;</span><br><span class="line">=&gt; &quot;This is a test string.&quot;</span><br><span class="line">?&gt; s.split(&quot; &quot;)</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string.&quot;]</span><br><span class="line">&gt;&gt; s.split(&quot; &quot;).inspect</span><br><span class="line">=&gt; &quot;[\&quot;This\&quot;, \&quot;is\&quot;, \&quot;a\&quot;, \&quot;test\&quot;, \&quot;string.\&quot;]&quot;</span><br><span class="line"></span><br><span class="line">?&gt; s.split(/\s+/)</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string.&quot;]</span><br><span class="line">&gt;&gt; s.split(/\s+/).inspect</span><br><span class="line">=&gt; &quot;[\&quot;This\&quot;, \&quot;is\&quot;, \&quot;a\&quot;, \&quot;test\&quot;, \&quot;string.\&quot;]&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>%</code> 来实现的语法捷径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?&gt; est = &quot;est&quot;</span><br><span class="line">=&gt; &quot;est&quot;</span><br><span class="line">&gt;&gt; %W&#123;This is a t#&#123;est&#125; string.&#125;</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string.&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; %w&#123;This is a t#&#123;est&#125; string.&#125;</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;t\#&#123;est&#125;&quot;, &quot;string.&quot;]</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组越界问题"><a href="#数组越界问题" class="headerlink" title="数组越界问题"></a>数组越界问题</h2><p>很多语言访问不存在的索引，会抛出数组越界异常，但 ruby 中不会，会返回 nil 哦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a[4]</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure></p><p>cool!😎<br>以上是读，如果写入呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a[3] = &quot;Grac&quot;</span><br><span class="line">=&gt; &quot;Grac&quot;</span><br><span class="line">&gt;&gt; a</span><br><span class="line">=&gt; [nil, nil, nil, &quot;Grac&quot;]</span><br><span class="line">&gt;&gt; a[7] = &quot;Kanil&quot;</span><br><span class="line">=&gt; &quot;Kanil&quot;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a</span><br><span class="line">=&gt; [nil, nil, nil, &quot;Grac&quot;, nil, nil, nil, &quot;Kanil&quot;]</span><br></pre></td></tr></table></figure></p><p>so cool!<br>在很多语言中，如果你的索引值小于 0 呢，又会怎样？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a[-1]</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a[-4]</span><br><span class="line">=&gt; nil</span><br></pre></td></tr></table></figure></p><p>wonderful!</p><h2 id="数组分类"><a href="#数组分类" class="headerlink" title="数组分类"></a>数组分类</h2><p>表示数组前两个元素的多种表示方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">?&gt; strings = %w&#123;a b c d e f g&#125;</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; strings[0..1]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[0...1]</span><br><span class="line">=&gt; [&quot;a&quot;]</span><br><span class="line">&gt;&gt; strings[0...2]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[0,2]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[-7,2]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[-7..-6]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[-7...2]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[-7..1]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[0..-6]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings[0...-5]</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br></pre></td></tr></table></figure></p><p>进阶思考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; (0..1).class</span><br><span class="line">=&gt; Range</span><br><span class="line">?&gt; strings.[](0..1)</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">&gt;&gt; strings.[](Range.new(0,1))</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;]</span><br></pre></td></tr></table></figure></p><p>有趣的 <code>numerouno</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gem install numerouno</span><br><span class="line">Fetching: numerouno-0.2.0.gem (100%)</span><br><span class="line">Successfully installed numerouno-0.2.0</span><br><span class="line">Parsing documentation for numerouno-0.2.0</span><br><span class="line">Installing ri documentation for numerouno-0.2.0</span><br><span class="line">Done installing documentation for numerouno after 0 seconds</span><br><span class="line">1 gem installed</span><br><span class="line">➜  ~ irb --simple-prompt</span><br><span class="line"></span><br><span class="line">?&gt; require &apos;numerouno&apos;</span><br><span class="line">=&gt; true</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; &quot;sixty one&quot;.as_number</span><br><span class="line">=&gt; 61</span><br><span class="line"></span><br><span class="line"># 为数组添加英文索引</span><br><span class="line">?&gt; class EnglishArray &lt; Array</span><br><span class="line">&gt;&gt;   def [](idx)</span><br><span class="line">&gt;&gt;     if String === idx</span><br><span class="line">&gt;&gt;       self.at(idx.as_number)</span><br><span class="line">&gt;&gt;     end</span><br><span class="line">&gt;&gt;   end</span><br><span class="line">&gt;&gt; end</span><br><span class="line">=&gt; :[]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; array = EnglishArray.new([1, 2, 3, 4])</span><br><span class="line">=&gt; [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; array[&quot;one&quot;]</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; array[&quot;three&quot;]</span><br><span class="line">=&gt; 4</span><br></pre></td></tr></table></figure></p><h2 id="Ruby-数组的万能结构"><a href="#Ruby-数组的万能结构" class="headerlink" title="Ruby 数组的万能结构"></a>Ruby 数组的万能结构</h2><ul><li><p>栈<br>可以将数组作为<code>栈</code>。其功能和 <code>Python list</code> 相似，使用 <code>pop</code> 和 <code>push</code> 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a.push(3)</span><br><span class="line">=&gt; [3]</span><br><span class="line">&gt;&gt; a.push(&quot;Grac&quot;)</span><br><span class="line">=&gt; [3, &quot;Grac&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.push(&quot;Kanil&quot;)</span><br><span class="line">=&gt; [3, &quot;Grac&quot;, &quot;Kanil&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt;</span><br><span class="line">?&gt; a.pop</span><br><span class="line">=&gt; &quot;Kanil&quot;</span><br><span class="line">&gt;&gt; a.pop</span><br><span class="line">=&gt; &quot;Grac&quot;</span><br><span class="line">&gt;&gt; a.pop</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt; a</span><br></pre></td></tr></table></figure></li><li><p>队列<br>队列，即先进先出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a.push(1)</span><br><span class="line">=&gt; [1]</span><br><span class="line">&gt;&gt; a.push(2)</span><br><span class="line">=&gt; [1, 2]</span><br><span class="line">&gt;&gt; a.push(3)</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.shift</span><br><span class="line">=&gt; 1</span><br><span class="line">&gt;&gt; a.shift</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; a.shift</span><br><span class="line">=&gt; 3</span><br><span class="line">&gt;&gt; a</span><br><span class="line">=&gt; []</span><br></pre></td></tr></table></figure></li></ul><p>还可以使用 <code>unshift</code> 队首加入新元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a.push(1)</span><br><span class="line">=&gt; [1]</span><br><span class="line">&gt;&gt; a.unshift(2)</span><br><span class="line">=&gt; [2, 1]</span><br><span class="line">&gt;&gt; a.unshift(3)</span><br><span class="line">=&gt; [3, 2, 1]</span><br></pre></td></tr></table></figure></p><p>使用 <code>delete</code> 删除任意位置元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.delete(2)</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; a</span><br><span class="line">=&gt; [1, 3]</span><br></pre></td></tr></table></figure></p><ul><li>集合<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">?&gt; [1, 2, 3] + [4, 5, 6]</span><br><span class="line">=&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line">?&gt; [1, 2, 3] + [2, 3]</span><br><span class="line">=&gt; [1, 2, 3, 2, 3]</span><br><span class="line"></span><br><span class="line">&gt;&gt; [1, 2, 3].concat([4, 5, 6])</span><br><span class="line">=&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line">&gt;&gt; [&quot;a&quot;, 1, 2, 3, &quot;b&quot;] - [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line"></span><br><span class="line">&gt;&gt; [1, 2, 4] &amp; [1, 2, 3]</span><br><span class="line">=&gt; [1, 2]</span><br><span class="line"></span><br><span class="line">&gt;&gt; [1, 2, 4] | [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 4, 3]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Ruby-数组常用方法"><a href="#Ruby-数组常用方法" class="headerlink" title="Ruby 数组常用方法"></a>Ruby 数组常用方法</h2><ul><li><p>检查数组是否为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = []</span><br><span class="line">=&gt; []</span><br><span class="line">&gt;&gt; a.empty?</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure></li><li><p>移动元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 转置</span><br><span class="line">?&gt; [1, 2, 4].reverse</span><br><span class="line">=&gt; [4, 2, 1]</span><br><span class="line"></span><br><span class="line"># 向左移动一</span><br><span class="line">?&gt; [1, 2, 4].rotate</span><br><span class="line">=&gt; [2, 4, 1]</span><br><span class="line"></span><br><span class="line"># 向右移动一</span><br><span class="line">?&gt; [1, 2, 4].rotate(-1)</span><br><span class="line">=&gt; [4, 1, 2]</span><br></pre></td></tr></table></figure></li><li><p>安全提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.freeze</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a &lt;&lt; 4</span><br><span class="line">RuntimeError: can&apos;t modify frozen Array</span><br><span class="line">from (irb):85</span><br><span class="line">from /Users/gekang/.rvm/rubies/ruby-2.2.4/bin/irb:11:in `&lt;main&gt;&apos;</span><br></pre></td></tr></table></figure></li><li><p>数组的 <code>join</code> 方法，将元素都链接为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, &quot;Grac&quot;, &quot;Kanil&quot;]</span><br><span class="line">=&gt; [1, 2, &quot;Grac&quot;, &quot;Kanil&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.join</span><br><span class="line">=&gt; &quot;12GracKanil&quot;</span><br></pre></td></tr></table></figure></li></ul><p>当然，可以传入参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a.join(&quot;,&quot;)</span><br><span class="line">=&gt; &quot;1,2,Grac,Kanil&quot;</span><br></pre></td></tr></table></figure></p><ul><li><p>删除嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?&gt; [1, [2, 3], [4, [&quot;a&quot;, nil]]].flatten</span><br><span class="line">=&gt; [1, 2, 3, 4, &quot;a&quot;, nil]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; [1, [2, 3], [4, [&quot;a&quot;, nil]]].flatten(1)</span><br><span class="line">=&gt; [1, 2, 3, 4, [&quot;a&quot;, nil]]</span><br></pre></td></tr></table></figure></li><li><p>删除副本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?&gt; [4, 1, 2, 3, 1, 4].uniq</span><br><span class="line">=&gt; [4, 1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>检查是否包含某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, &quot;a&quot;, 2]</span><br><span class="line">=&gt; [1, &quot;a&quot;, 2]</span><br><span class="line">&gt;&gt; a.include? &quot;a&quot;</span><br><span class="line">=&gt; true</span><br><span class="line">&gt;&gt; a.include? 1</span><br><span class="line">=&gt; true</span><br><span class="line">&gt;&gt; a.include?(1)</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure></li><li><p>分割数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, 3, 4, 5, 6]</span><br><span class="line">=&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt; a.first</span><br><span class="line">=&gt; 1</span><br><span class="line">&gt;&gt; a.last</span><br><span class="line">=&gt; 6</span><br><span class="line">&gt;&gt; a.first(3)</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.last(4)</span><br><span class="line">=&gt; [3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li><p>统计数组中某元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [4, 1, 2, 3, 1, 4]</span><br><span class="line">=&gt; [4, 1, 2, 3, 1, 4]</span><br><span class="line">&gt;&gt; a.count 4</span><br><span class="line">=&gt; 2</span><br></pre></td></tr></table></figure></li><li><p>查询数组所有方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">?&gt; Array.methods</span><br><span class="line">=&gt; [:[], :try_convert, :allocate, :new, :superclass, :freeze, :===, :==, :&lt;=&gt;, :&lt;, :&lt;=, :&gt;, :&gt;=, :to_s, </span><br><span class="line">:inspect, :included_modules, :include?, :name, :ancestors, :instance_methods, :public_instance_methods, :protected_instance_methods, :private_instance_methods, :constants, :const_get, :const_set, </span><br><span class="line">:const_defined?, :const_missing, :class_variables, :remove_class_variable, :class_variable_get, </span><br><span class="line">:class_variable_set, :class_variable_defined?, :public_constant, :private_constant, :singleton_class?, </span><br><span class="line">:include, :prepend, :module_exec, :class_exec, :module_eval, :class_eval, :method_defined?, </span><br><span class="line">:public_method_defined?, :private_method_defined?, :protected_method_defined?, :public_class_method, :private_class_method, :autoload, :autoload?, :instance_method, :public_instance_method, :nil?, :=~, </span><br><span class="line">:!~, :eql?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, </span><br><span class="line">:untrust, :untrusted?, :trust, :frozen?, :methods, :singleton_methods, :protected_methods, </span><br><span class="line">:private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, </span><br><span class="line">:send, :public_send, :respond_to?, :extend, :display, :method, :public_method, :singleton_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :instance_eval, </span><br><span class="line">:instance_exec, :__send__, :__id__]</span><br></pre></td></tr></table></figure></li></ul><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>迭代可以说是 <code>Ruby</code> 的一大亮点，我觉得 <code>Objective-C</code> 中的迭代就很少使用，比较笨重，更多的会想到写一个 for 循环，然而，Ruby 并不会，优雅的迭代使用起来比较顺手。</p><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p>Ruby 中迭代的核心应该就是 <code>each</code> 方法了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.each &#123;|s| puts s.cap&#125; # Tab 键可以联想</span><br><span class="line">s.capitalize   s.capitalize!  s.captures</span><br><span class="line"></span><br><span class="line">?&gt; a.each &#123; |s| puts s.capitalize &#125;</span><br><span class="line">This</span><br><span class="line">Is</span><br><span class="line">A</span><br><span class="line">Test</span><br><span class="line">String</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br></pre></td></tr></table></figure></p><p>还有 <code>reverse_each</code> 反向迭代<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">&gt;&gt; a.reverse_each &#123; |s| puts s.up &#125;</span><br><span class="line">s.upcase   s.upcase!  s.update   s.upto</span><br><span class="line">&gt;&gt; a.reverse_each &#123; |s| puts s.upcase &#125;</span><br><span class="line">STRING</span><br><span class="line">TEST</span><br><span class="line">A</span><br><span class="line">IS</span><br><span class="line">THIS</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br></pre></td></tr></table></figure></p><p>如果你需要索引，当然也给你准备好了当前处理的索引 <code>each_with_index</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">&gt;&gt; a.each_with_index &#123; |s, index| puts &quot;#&#123;index&#125; is #&#123;s&#125;&quot; &#125;</span><br><span class="line">0 is This</span><br><span class="line">1 is is</span><br><span class="line">2 is a</span><br><span class="line">3 is test</span><br><span class="line">4 is string</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br></pre></td></tr></table></figure></p><p>如果你需要迭代数组中某一部分，可以使用分割数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">&gt;&gt; a[0..2]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;]</span><br><span class="line">&gt;&gt; a[0..2].each &#123;|s| puts s&#125;</span><br><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;]</span><br></pre></td></tr></table></figure></p><p>也可以使用 Range 来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;, &quot;string&quot;]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; (0..2).each &#123;|i| puts a[i]&#125;</span><br><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">=&gt; 0..2</span><br></pre></td></tr></table></figure></p><h3 id="map-或-collect"><a href="#map-或-collect" class="headerlink" title="map 或 collect"></a>map 或 collect</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.map &#123; |i| i + 1 &#125;</span><br><span class="line">=&gt; [2, 3, 4]</span><br></pre></td></tr></table></figure><p>如果只是让每一个元素调用方法，不关心每个元素的值时，可以使用快捷写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.map(&amp;:to_f)</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br></pre></td></tr></table></figure></p><p><code>#map</code> 不改变原来的数组，而是会生成新的数组，如果需要修改原数组，需要使用 <code>#map!</code> 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.map(&amp;:to_f)</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.map!(&amp;:to_f)</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br><span class="line">&gt;&gt; a</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br></pre></td></tr></table></figure></p><p><code>#map</code> 和 <code>#collect</code> 相同，可以互换使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = [1, 2, 3]</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&gt;&gt; a.map(&amp;:to_f)</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br><span class="line">&gt;&gt; a.collect(&amp;:to_f)</span><br><span class="line">=&gt; [1.0, 2.0, 3.0]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;学习 Ruby 集合我觉得最好的方式是打开 &lt;code&gt;irb --simple-prompt&lt;/code&gt; 命令，跟着例子学习。试着借助 Tab 补全加以思考🤔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建数组&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 札记 - Ruby 集合家族之哈希（Hash）</title>
    <link href="http://grackanil.top/2019/05/01/ruby-collection-another/"/>
    <id>http://grackanil.top/2019/05/01/ruby-collection-another/</id>
    <published>2019-05-01T05:24:47.914Z</published>
    <updated>2019-05-01T05:24:47.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说完数组，就知道下一个肯定是<code>哈希</code>，在 <code>Objective-C</code> 里的体现是<code>字典（NSDictionary）</code>。为什么这种集合很受欢迎呢？这要从哈希算法说起，简单的说，<code>hash</code> 能以 O（1）的复杂度将内容映射到位置。Hash 算法的原理和基础概念，不乏好文，此处不赘述。后面可以专门复习梳理下。</p><h2 id="创建哈希"><a href="#创建哈希" class="headerlink" title="创建哈希"></a>创建哈希</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?&gt; hash = &#123;&#125;</span><br><span class="line">=&gt; &#123;&#125;</span><br><span class="line">&gt;&gt; hash[&apos;1&apos;] = &quot;one&quot;</span><br><span class="line">=&gt; &quot;one&quot;</span><br><span class="line">?&gt; hash</span><br><span class="line">=&gt; &#123;&quot;1&quot;=&gt;&quot;one&quot;&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; h = Hash.new</span><br><span class="line">=&gt; &#123;&#125;</span><br><span class="line">&gt;&gt; h[&apos;2&apos;] = &quot;two&quot;</span><br><span class="line">=&gt; &quot;two&quot;</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;&quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br></pre></td></tr></table></figure><p>可以用 <code>=&gt;</code> 初始化 <code>hash</code>，可以叫它<code>哈希火箭🚀</code>（调皮）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?&gt; h = &#123;</span><br><span class="line">?&gt; &apos;1&apos; =&gt; &quot;one&quot;,</span><br><span class="line">?&gt; &apos;2&apos; =&gt; &quot;two&quot;</span><br><span class="line">&gt;&gt; &#125;</span><br><span class="line">=&gt; &#123;&quot;1&quot;=&gt;&quot;one&quot;, &quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;&quot;1&quot;=&gt;&quot;one&quot;, &quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>如果取没有 key 的值，返回 nil。当然这取决于你构造时有没有传默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?&gt; h[&quot;3&quot;]</span><br><span class="line">=&gt; nil</span><br><span class="line"></span><br><span class="line">?&gt; h = Hash.new(0)</span><br><span class="line">=&gt; &#123;&#125;</span><br><span class="line">&gt;&gt; h[&apos;4&apos;]</span><br><span class="line">=&gt; 0</span><br></pre></td></tr></table></figure></p><p>删除，简单的置值为 nil 不能删除。可以使用<code>#delete</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">?&gt; h = &#123;&apos;1&apos; =&gt; &quot;one&quot;, &apos;2&apos; =&gt; &quot;two&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;1&quot;=&gt;&quot;one&quot;, &quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br><span class="line">&gt;&gt; h.size</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; h[&apos;1&apos;] = nil</span><br><span class="line">=&gt; nil</span><br><span class="line">&gt;&gt; h.size</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;&quot;1&quot;=&gt;nil, &quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br><span class="line">&gt;&gt; h.delete(&apos;1&apos;)</span><br><span class="line">=&gt; nil</span><br><span class="line">&gt;&gt; h.size</span><br><span class="line">=&gt; 1</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;&quot;2&quot;=&gt;&quot;two&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用一些表示作为键值，也可以不使用 <code>=&gt;</code> 创建哈希（使用冒号，这和 Objective-C 很相似）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?&gt; h = &#123;:one =&gt; 1, :two =&gt; 2&#125;</span><br><span class="line">=&gt; &#123;:one=&gt;1, :two=&gt;2&#125;</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;:one=&gt;1, :two=&gt;2&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; h = &#123;one: 1, two: 2&#125;</span><br><span class="line">=&gt; &#123;:one=&gt;1, :two=&gt;2&#125;</span><br><span class="line">&gt;&gt; h</span><br><span class="line">=&gt; &#123;:one=&gt;1, :two=&gt;2&#125;</span><br></pre></td></tr></table></figure></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p>基础方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = &#123;&quot;one&quot; =&gt; &quot;grac&quot;, &quot;two&quot; =&gt; &quot;kanil&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.keys</span><br><span class="line">=&gt; [&quot;one&quot;, &quot;two&quot;]</span><br><span class="line">&gt;&gt; a.values</span><br><span class="line">=&gt; [&quot;grac&quot;, &quot;kanil&quot;]</span><br><span class="line">&gt;&gt; a.length</span><br><span class="line">=&gt; 2</span><br><span class="line">&gt;&gt; a.size</span><br><span class="line">=&gt; 2</span><br></pre></td></tr></table></figure></li><li><p>has_key?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = &#123;&quot;one&quot; =&gt; &quot;grac&quot;, &quot;two&quot; =&gt; &quot;kanil&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br><span class="line">&gt;&gt; a.has_key? &quot;one&quot;</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure></li><li><p>select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = &#123;&quot;one&quot; =&gt; &quot;grac&quot;, &quot;two&quot; =&gt; &quot;kanil&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br><span class="line">?&gt; a.select &#123; |k, v| k == &quot;one&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.select &#123; |k, v| k == &quot;one&quot; || k == &quot;two&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>to_a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = &#123;&quot;one&quot; =&gt; &quot;grac&quot;, &quot;two&quot; =&gt; &quot;kanil&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br><span class="line">?&gt; a.to_a</span><br><span class="line">=&gt; [[&quot;one&quot;, &quot;grac&quot;], [&quot;two&quot;, &quot;kanil&quot;]]</span><br></pre></td></tr></table></figure></li><li><p>合并两个 <code>Hash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &#123; &quot;one&quot; =&gt; &quot;grac&quot; &#125;.merge(&#123; &quot;two&quot; =&gt; &quot;kanil&quot; &#125;)</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>fetch 和使用 <code>[]</code> 一样获取数组 value，但是如果没有会 <code>raise</code> 错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?&gt; a = &#123;&quot;one&quot; =&gt; &quot;grac&quot;, &quot;two&quot; =&gt; &quot;kanil&quot;&#125;</span><br><span class="line">=&gt; &#123;&quot;one&quot;=&gt;&quot;grac&quot;, &quot;two&quot;=&gt;&quot;kanil&quot;&#125;</span><br><span class="line">&gt;&gt; a[&quot;three&quot;]</span><br><span class="line">=&gt; nil</span><br><span class="line">&gt;&gt; a.fetch(&quot;two&quot;)</span><br><span class="line">=&gt; &quot;kanil&quot;</span><br><span class="line">&gt;&gt; a.fetch(&quot;three&quot;)</span><br><span class="line">KeyError: key not found: &quot;three&quot;</span><br><span class="line">from (irb):7:in `fetch&apos;</span><br><span class="line">from (irb):7</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li></li></ul><h2 id="函数关键字参数传递"><a href="#函数关键字参数传递" class="headerlink" title="函数关键字参数传递"></a>函数关键字参数传递</h2><p>Ruby 不支持关键字参数，但可以使用 Hash 模拟出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">?&gt; class Article</span><br><span class="line">&gt;&gt;   attr_accessor :name, :author, :price</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt;   def initialize(params = &#123;&#125;)</span><br><span class="line">&gt;&gt;     @name = params[:name]</span><br><span class="line">&gt;&gt;     @author = params[:author]</span><br><span class="line">&gt;&gt;     @price = params[:price]</span><br><span class="line">&gt;&gt;   end</span><br><span class="line">&gt;&gt; end</span><br><span class="line">=&gt; :initialize</span><br><span class="line">&gt;&gt; a = Article.new(name: &quot;雾都&quot;, author: &quot;tom&quot;, price: 12.5)</span><br><span class="line">=&gt; #&lt;Article:0x007ffc2189f970 @name=&quot;雾都&quot;, @author=&quot;tom&quot;, @price=12.5&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; a.name</span><br><span class="line">=&gt; &quot;雾都&quot;</span><br></pre></td></tr></table></figure></p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>和数组很类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?&gt; hash = &#123;name: &quot;雾都&quot;, author: &quot;tom&quot;, price: 12.5&#125;</span><br><span class="line">=&gt; &#123;:name=&gt;&quot;雾都&quot;, :author=&gt;&quot;tom&quot;, :price=&gt;12.5&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line">?&gt; hash.each &#123;|key, value| puts &quot;#&#123;key&#125; =&gt; #&#123;value&#125;&quot;&#125;</span><br><span class="line">name =&gt; 雾都</span><br><span class="line">author =&gt; tom</span><br><span class="line">price =&gt; 12.5</span><br><span class="line">=&gt; &#123;:name=&gt;&quot;雾都&quot;, :author=&gt;&quot;tom&quot;, :price=&gt;12.5&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说完数组，就知道下一个肯定是&lt;code&gt;哈希&lt;/code&gt;，在 &lt;code&gt;Objective-C&lt;/code&gt; 里的体现是&lt;code&gt;字典
      
    
    </summary>
    
      <category term="Ruby 札记" scheme="http://grackanil.top/categories/Ruby-%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Ruby" scheme="http://grackanil.top/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Rails Tips - pluralize</title>
    <link href="http://grackanil.top/2019/05/01/rails-tips-pluralize/"/>
    <id>http://grackanil.top/2019/05/01/rails-tips-pluralize/</id>
    <published>2019-05-01T05:24:47.913Z</published>
    <updated>2019-05-01T05:24:47.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-一个约定"><a href="#0x00-一个约定" class="headerlink" title="0x00 一个约定"></a>0x00 一个约定</h2><p>局部视图在多个控制器中可以复用，把它放到 <code>app/views/shared/</code> 目录中。</p><h2 id="0x01-pluralize-是成为复数"><a href="#0x01-pluralize-是成为复数" class="headerlink" title="0x01 pluralize(是成为复数)"></a>0x01 pluralize(是成为复数)</h2><p>一个新方法 <code>pluralize</code>，可以使用 helper 对象调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rails console</span><br><span class="line">&gt;&gt;</span><br><span class="line"># 第一参数为整数，返回数字和第二个参数的组合一起后的正确单复数形式。支持很多单词包括不规则变换。</span><br><span class="line">&gt;&gt; helper.pluralize(1, &quot;woman&quot;)</span><br><span class="line">=&gt; &quot;1 woman&quot;</span><br><span class="line">&gt;&gt; helper.pluralize(2, &quot;woman&quot;)</span><br><span class="line">=&gt; &quot;2 women&quot;</span><br><span class="line">?&gt; helper.pluralize(5, &quot;error&quot;)</span><br><span class="line">=&gt; &quot;5 errors&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-一个约定&quot;&gt;&lt;a href=&quot;#0x00-一个约定&quot; class=&quot;headerlink&quot; title=&quot;0x00 一个约定&quot;&gt;&lt;/a&gt;0x00 一个约定&lt;/h2&gt;&lt;p&gt;局部视图在多个控制器中可以复用，把它放到 &lt;code&gt;app/views/share
      
    
    </summary>
    
      <category term="Rails Tips" scheme="http://grackanil.top/categories/Rails-Tips/"/>
    
    
      <category term="Rails Tips" scheme="http://grackanil.top/tags/Rails-Tips/"/>
    
      <category term="pluralize" scheme="http://grackanil.top/tags/pluralize/"/>
    
  </entry>
  
  <entry>
    <title>iOS 真机中设置 Slow Animations</title>
    <link href="http://grackanil.top/2019/05/01/ios-slow-animation/"/>
    <id>http://grackanil.top/2019/05/01/ios-slow-animation/</id>
    <published>2019-05-01T05:24:47.913Z</published>
    <updated>2019-05-01T05:24:47.913Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分享个 XCode LLDB 调试小技巧</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 iOS 开发中，动画也是一个很重要的组成部分。你会不会因为动画需要有灵性，苦于一点点调试参数，但又看不清楚细节？会不会遇到 App 中某些色块一闪而过？会不会突然闪屏不知道为什么？</p><p>当然，不可避免。</p><h2 id="可能会用到的调试技巧"><a href="#可能会用到的调试技巧" class="headerlink" title="可能会用到的调试技巧"></a>可能会用到的调试技巧</h2><p>或许有些人，早已知道，模拟器中，苹果提供了 <code>Slow Animations</code> 选项。也或许有些人还不知道，或者未尝试使用过。</p><h3 id="模拟器开启-Slow-Animations"><a href="#模拟器开启-Slow-Animations" class="headerlink" title="模拟器开启 Slow Animations"></a>模拟器开启 <code>Slow Animations</code></h3><p>打开模拟器，<code>菜单栏</code> &gt; <code>Debug</code> &gt; <code>Show Animations</code><br><img src="http://oxwk2uou0.bkt.clouddn.com/show_animations.png" alt="模拟器 Slow Animations 截图"></p><h3 id="真机开启-Slow-Animations"><a href="#真机开启-Slow-Animations" class="headerlink" title="真机开启 Slow Animations"></a>真机开启 <code>Slow Animations</code></h3><ul><li><p>可以使用 LLDB 实现 <code>Slow Animations</code><br>1) 点击 <code>Debug</code> 区域的 <code>Pause program execution</code><br><img src="http://oxwk2uou0.bkt.clouddn.com/device_show_animations.png" alt="真机 Slow Animations 截图 1"><br>2) 点击 <code>Debug</code> 区域的 LLDB 中输入命令 <code>p [(CALayer *)[[[[UIApplication sharedApplication] windows] objectAtIndex:0] layer] setSpeed:.1f]</code><br>另外，Swift 使用 <code>p UIApplication.sharedApplication().windows.first?.layer.speed = 0.1</code> 即可。<br><img src="http://oxwk2uou0.bkt.clouddn.com/device_show_animations_2.png" alt="真机 Slow Animations 截图 2"><br>3) 点击 <code>Debug</code> 区域的 <code>Continue program execution</code><br><img src="http://oxwk2uou0.bkt.clouddn.com/device_show_animations_3.png" alt="真机 Slow Animations 截图 3"></p></li><li><p>可以代码形式实现 <code>Slow Animations</code><br><code>didFinishLaunchingWithOptions</code> 中设置 <code>self.window.layer.speed = .1f;</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;分享个 XCode LLDB 调试小技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 iOS 开发中，动画也是一
      
    
    </summary>
    
      <category term="iOS" scheme="http://grackanil.top/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://grackanil.top/tags/Tutorial/"/>
    
      <category term="Animations" scheme="http://grackanil.top/tags/Animations/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 搭建 Socks5 Proxy 代理服务器</title>
    <link href="http://grackanil.top/2019/05/01/centos-socks5-proxy/"/>
    <id>http://grackanil.top/2019/05/01/centos-socks5-proxy/</id>
    <published>2019-05-01T05:24:47.913Z</published>
    <updated>2019-05-01T05:24:47.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Socks-5"><a href="#Socks-5" class="headerlink" title="Socks 5"></a>Socks 5</h3><p><a href="http://ss5.sourceforge.net/" target="_blank" rel="noopener">SS5 官方网站</a></p><h3 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h3><ul><li><p>查看系统环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux vultr.guest 3.10.0-862.3.2.el7.x86_64 #1 SMP Mon May 21 23:36:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">cat /etc/os-release</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">yum --version</span><br><span class="line">3.4.3</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>下载 socks5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://jaist.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -vzx -f ss5-3.8.9-8.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ss5-3.8.9/</span><br></pre></td></tr></table></figure></li><li><p>运行<code>./configure</code>，完成环境检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>修改脚本权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/init.d/ss5</span><br></pre></td></tr></table></figure></li><li><p>修改 socks5 配置文件，放开 <code>auth</code> 和 <code>permit</code> 注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/opt/ss5/ss5.conf</span><br><span class="line"></span><br><span class="line"># 如果需要配置访问权限</span><br><span class="line"># auth 0.0.0.0/0 - u</span><br><span class="line"># permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/opt/ss5/ss5.passwd</span><br><span class="line"># 格式为 用户名 密码</span><br><span class="line"># username password</span><br></pre></td></tr></table></figure></li><li><p>修改端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/ss5</span><br><span class="line"></span><br><span class="line"># SS5_OPTS=&quot; -u root -b 0.0.0.0:8080&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ss5 start</span><br></pre></td></tr></table></figure></li><li><p>添加自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add ss5</span><br><span class="line">chkconfig --level 345 ss5 on</span><br><span class="line">chkconfig --list | grep ss5</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Socks-5&quot;&gt;&lt;a href=&quot;#Socks-5&quot; class=&quot;headerlink&quot; title=&quot;Socks 5&quot;&gt;&lt;/a&gt;Socks 5&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ss5.sourceforge.net/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="CentOS" scheme="http://grackanil.top/categories/CentOS/"/>
    
    
      <category term="Socks5 Proxy" scheme="http://grackanil.top/tags/Socks5-Proxy/"/>
    
  </entry>
  
</feed>
